{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\bloom_app\\\\client\\\\src\\\\components\\\\ReplyAndButtons.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editReply, deleteReply } from '../reducers/postCommentsReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport DeleteDialog from './DeleteDialog';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { TextField, Button, Typography } from '@material-ui/core';\nimport { useCommentAndBtnsStyles } from '../styles/muiStyles';\nimport SendIcon from '@material-ui/icons/Send';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReplyAndButtons = _ref => {\n  _s();\n\n  let {\n    isMobile,\n    reply,\n    postId,\n    commentId,\n    user\n  } = _ref;\n  const [editOpen, setEditOpen] = useState(false);\n  const [editInput, setEditInput] = useState(reply.replyBody);\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n  const classes = useCommentAndBtnsStyles();\n\n  const handleEditReply = async () => {\n    try {\n      setSubmitting(true);\n      await dispatch(editReply(postId, commentId, reply.id, editInput));\n      setSubmitting(false);\n      setEditOpen(false);\n      dispatch(notify(`Reply edited!`, 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const handleReplyDelete = async () => {\n    try {\n      await dispatch(deleteReply(postId, commentId, reply.id));\n      dispatch(notify(`Reply deleted!`, 'success'));\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!editOpen ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      children: reply.replyBody\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.inputDiv,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        multiline: true,\n        required: true,\n        fullWidth: true,\n        rows: 2,\n        rowsMax: Infinity,\n        value: editInput,\n        onChange: e => setEditInput(e.target.value),\n        variant: \"outlined\",\n        size: isMobile ? 'small' : 'medium'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.submitBtns,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setEditOpen(false),\n          color: \"primary\",\n          variant: \"outlined\",\n          size: \"small\",\n          className: classes.cancelBtn,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleEditReply,\n          color: \"primary\",\n          variant: \"contained\",\n          startIcon: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 26\n          }, this),\n          size: \"small\",\n          disabled: submitting,\n          children: submitting ? 'Updating' : 'Update'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), user && user.id === reply.repliedBy.id && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.btnBar,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        color: \"inherit\",\n        startIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 24\n        }, this),\n        className: classes.btnStyle,\n        onClick: () => setEditOpen(prevState => !prevState),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DeleteDialog, {\n        type: \"comment\",\n        handleDelete: handleReplyDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ReplyAndButtons, \"v/kHY3EwBkFJAzaSmp0L1I5dMDc=\", false, function () {\n  return [useDispatch, useCommentAndBtnsStyles];\n});\n\n_c = ReplyAndButtons;\nexport default ReplyAndButtons;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReplyAndButtons\");","map":{"version":3,"sources":["C:/Users/1/Desktop/bloom_app/client/src/components/ReplyAndButtons.js"],"names":["React","useState","useDispatch","editReply","deleteReply","notify","DeleteDialog","getErrorMsg","TextField","Button","Typography","useCommentAndBtnsStyles","SendIcon","EditIcon","ReplyAndButtons","isMobile","reply","postId","commentId","user","editOpen","setEditOpen","editInput","setEditInput","replyBody","submitting","setSubmitting","dispatch","classes","handleEditReply","id","err","handleReplyDelete","inputDiv","Infinity","e","target","value","submitBtns","cancelBtn","repliedBy","btnBar","btnStyle","prevState"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { editReply, deleteReply } from '../reducers/postCommentsReducer';\r\nimport { notify } from '../reducers/notificationReducer';\r\nimport DeleteDialog from './DeleteDialog';\r\nimport getErrorMsg from '../utils/getErrorMsg';\r\n\r\nimport { TextField, Button, Typography } from '@material-ui/core';\r\nimport { useCommentAndBtnsStyles } from '../styles/muiStyles';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst ReplyAndButtons = ({ isMobile, reply, postId, commentId, user }) => {\r\n  const [editOpen, setEditOpen] = useState(false);\r\n  const [editInput, setEditInput] = useState(reply.replyBody);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const classes = useCommentAndBtnsStyles();\r\n\r\n  const handleEditReply = async () => {\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(editReply(postId, commentId, reply.id, editInput));\r\n      setSubmitting(false);\r\n      setEditOpen(false);\r\n      dispatch(notify(`Reply edited!`, 'success'));\r\n    } catch (err) {\r\n      setSubmitting(false);\r\n      dispatch(notify(getErrorMsg(err), 'error'));\r\n    }\r\n  };\r\n\r\n  const handleReplyDelete = async () => {\r\n    try {\r\n      await dispatch(deleteReply(postId, commentId, reply.id));\r\n      dispatch(notify(`Reply deleted!`, 'success'));\r\n    } catch (err) {\r\n      dispatch(notify(getErrorMsg(err), 'error'));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editOpen ? (\r\n        <Typography variant=\"body2\">{reply.replyBody}</Typography>\r\n      ) : (\r\n        <div className={classes.inputDiv}>\r\n          <TextField\r\n            multiline\r\n            required\r\n            fullWidth\r\n            rows={2}\r\n            rowsMax={Infinity}\r\n            value={editInput}\r\n            onChange={(e) => setEditInput(e.target.value)}\r\n            variant=\"outlined\"\r\n            size={isMobile ? 'small' : 'medium'}\r\n          />\r\n          <div className={classes.submitBtns}>\r\n            <Button\r\n              onClick={() => setEditOpen(false)}\r\n              color=\"primary\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              className={classes.cancelBtn}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={handleEditReply}\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              startIcon={<SendIcon />}\r\n              size=\"small\"\r\n              disabled={submitting}\r\n            >\r\n              {submitting ? 'Updating' : 'Update'}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {user && user.id === reply.repliedBy.id && (\r\n        <div className={classes.btnBar}>\r\n          <Button\r\n            size=\"small\"\r\n            color=\"inherit\"\r\n            startIcon={<EditIcon />}\r\n            className={classes.btnStyle}\r\n            onClick={() => setEditOpen((prevState) => !prevState)}\r\n          >\r\n            Edit\r\n          </Button>\r\n          <DeleteDialog type=\"comment\" handleDelete={handleReplyDelete} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyAndButtons;\r\n"]},"metadata":{},"sourceType":"module"}