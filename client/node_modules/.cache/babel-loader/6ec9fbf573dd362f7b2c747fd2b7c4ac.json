{"ast":null,"code":"import postService from '../services/posts';\n\nconst postPageReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCH_POST_COMMENTS':\n      return action.payload;\n\n    case 'CREATE_NEW_POST':\n      return action.payload;\n\n    case 'UPDATE_POST':\n      return action.payload;\n\n    case 'TOGGLE_VOTE':\n      return { ...state,\n        ...action.payload\n      };\n\n    case 'VOTE_COMMENT':\n      return { ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : { ...c,\n          ...action.payload.data\n        })\n      };\n\n    case 'VOTE_REPLY':\n      return { ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : { ...c,\n          replies: c.replies.map(r => r.id !== action.payload.replyId ? r : { ...r,\n            ...action.payload.data\n          })\n        })\n      };\n\n    case 'ADD_COMMENT':\n      return { ...state,\n        comments: [...state.comments, action.payload]\n      };\n\n    case 'ADD_REPLY':\n      return { ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : { ...c,\n          replies: [...c.replies, action.payload.addedReply]\n        })\n      };\n\n    case 'EDIT_COMMENT':\n      return { ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : { ...c,\n          ...action.payload.data\n        })\n      };\n\n    case 'DELETE_COMMENT':\n      return { ...state,\n        comments: state.comments.filter(c => c.id !== action.payload)\n      };\n\n    case 'EDIT_REPLY':\n      return { ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : { ...c,\n          replies: c.replies.map(r => r.id !== action.payload.replyId ? r : { ...r,\n            ...action.payload.data\n          })\n        })\n      };\n\n    case 'DELETE_REPLY':\n      return { ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : { ...c,\n          replies: c.replies.filter(r => r.id !== action.payload.replyId)\n        })\n      };\n\n    case 'SORT_COMMENTS':\n      return { ...state,\n        comments: state.comments.sort((a, b) => {\n          switch (action.payload) {\n            case 'new':\n              return new Date(b.createdAt) - new Date(a.createdAt);\n\n            case 'upvoted':\n              return b.pointsCount - a.pointsCount;\n\n            case 'downvoted':\n              return a.pointsCount - b.pointsCount;\n\n            case 'replied':\n              return b.replies.length - a.replies.length;\n\n            default:\n              return new Date(a.createdAt) - new Date(b.createdAt);\n          }\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const fetchPostComments = id => {\n  return async dispatch => {\n    const fetchedPost = await postService.getPostComments(id);\n    dispatch({\n      type: 'FETCH_POST_COMMENTS',\n      payload: fetchedPost\n    });\n  };\n};\nexport const createNewPost = postObject => {\n  return async dispatch => {\n    const addedPost = await postService.addNew(postObject);\n    dispatch({\n      type: 'CREATE_NEW_POST',\n      payload: addedPost\n    });\n    return addedPost.id;\n  };\n};\nexport const updatePost = (id, postObject) => {\n  return async dispatch => {\n    const updatedPost = await postService.editPost(id, postObject);\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: updatedPost\n    });\n  };\n};\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: {\n        upvotedBy,\n        pointsCount,\n        downvotedBy\n      }\n    });\n    await postService.upvotePost(id);\n  };\n};\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: {\n        upvotedBy,\n        pointsCount,\n        downvotedBy\n      }\n    });\n    await postService.downvotePost(id);\n  };\n};\nexport const toggleCommentUpvote = (postId, commentId, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n    dispatch({\n      type: 'VOTE_COMMENT',\n      payload: {\n        commentId,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.upvoteComment(postId, commentId);\n  };\n};\nexport const toggleCommentDownvote = (postId, commentId, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n    dispatch({\n      type: 'VOTE_COMMENT',\n      payload: {\n        commentId,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.downvoteComment(postId, commentId);\n  };\n};\nexport const toggleReplyUpvote = (postId, commentId, replyId, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n    dispatch({\n      type: 'VOTE_REPLY',\n      payload: {\n        commentId,\n        replyId,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.upvoteReply(postId, commentId, replyId);\n  };\n};\nexport const toggleReplyDownvote = (postId, commentId, replyId, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n    dispatch({\n      type: 'VOTE_REPLY',\n      payload: {\n        commentId,\n        replyId,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.downvoteReply(postId, commentId, replyId);\n  };\n};\nexport const addComment = (postId, comment) => {\n  return async dispatch => {\n    const addedComment = await postService.postComment(postId, {\n      comment\n    });\n    dispatch({\n      type: 'ADD_COMMENT',\n      payload: addedComment\n    });\n  };\n};\nexport const addReply = (postId, commentId, reply) => {\n  return async dispatch => {\n    const addedReply = await postService.postReply(postId, commentId, {\n      reply\n    });\n    dispatch({\n      type: 'ADD_REPLY',\n      payload: {\n        commentId,\n        addedReply\n      }\n    });\n  };\n};\nexport const editComment = (postId, commentId, comment) => {\n  return async dispatch => {\n    await postService.updateComment(postId, commentId, {\n      comment\n    });\n    const updatedAt = Date.now();\n    dispatch({\n      type: 'EDIT_COMMENT',\n      payload: {\n        commentId,\n        data: {\n          updatedAt,\n          commentBody: comment\n        }\n      }\n    });\n  };\n};\nexport const deleteComment = (postId, commentId) => {\n  return async dispatch => {\n    await postService.removeComment(postId, commentId);\n    dispatch({\n      type: 'DELETE_COMMENT',\n      payload: commentId\n    });\n  };\n};\nexport const editReply = (postId, commentId, replyId, reply) => {\n  return async dispatch => {\n    await postService.updateReply(postId, commentId, replyId, {\n      reply\n    });\n    const updatedAt = Date.now();\n    dispatch({\n      type: 'EDIT_REPLY',\n      payload: {\n        commentId,\n        replyId,\n        data: {\n          updatedAt,\n          replyBody: reply\n        }\n      }\n    });\n  };\n};\nexport const deleteReply = (postId, commentId, replyId) => {\n  return async dispatch => {\n    await postService.removeReply(postId, commentId, replyId);\n    dispatch({\n      type: 'DELETE_REPLY',\n      payload: {\n        commentId,\n        replyId\n      }\n    });\n  };\n};\nexport const sortComments = sortBy => {\n  return dispatch => {\n    dispatch({\n      type: 'SORT_COMMENTS',\n      payload: sortBy\n    });\n  };\n};\nexport default postPageReducer;","map":{"version":3,"sources":["C:/Users/1/Desktop/bloom_app/client/src/reducers/postCommentsReducer.js"],"names":["postService","postPageReducer","state","action","type","payload","comments","map","c","id","commentId","data","replies","r","replyId","addedReply","filter","sort","a","b","Date","createdAt","pointsCount","length","fetchPostComments","dispatch","fetchedPost","getPostComments","createNewPost","postObject","addedPost","addNew","updatePost","updatedPost","editPost","toggleUpvote","upvotedBy","downvotedBy","upvotePost","toggleDownvote","downvotePost","toggleCommentUpvote","postId","upvoteComment","toggleCommentDownvote","downvoteComment","toggleReplyUpvote","upvoteReply","toggleReplyDownvote","downvoteReply","addComment","comment","addedComment","postComment","addReply","reply","postReply","editComment","updateComment","updatedAt","now","commentBody","deleteComment","removeComment","editReply","updateReply","replyBody","deleteReply","removeReply","sortComments","sortBy"],"mappings":"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","sourcesContent":["import postService from '../services/posts';\r\n\r\nconst postPageReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_POST_COMMENTS':\r\n      return action.payload;\r\n    case 'CREATE_NEW_POST':\r\n      return action.payload;\r\n    case 'UPDATE_POST':\r\n      return action.payload;\r\n    case 'TOGGLE_VOTE':\r\n      return { ...state, ...action.payload };\r\n    case 'VOTE_COMMENT':\r\n      return {\r\n        ...state,\r\n        comments: state.comments.map((c) =>\r\n          c.id !== action.payload.commentId\r\n            ? c\r\n            : { ...c, ...action.payload.data }\r\n        ),\r\n      };\r\n    case 'VOTE_REPLY':\r\n      return {\r\n        ...state,\r\n        comments: state.comments.map((c) =>\r\n          c.id !== action.payload.commentId\r\n            ? c\r\n            : {\r\n                ...c,\r\n                replies: c.replies.map((r) =>\r\n                  r.id !== action.payload.replyId\r\n                    ? r\r\n                    : { ...r, ...action.payload.data }\r\n                ),\r\n              }\r\n        ),\r\n      };\r\n    case 'ADD_COMMENT':\r\n      return {\r\n        ...state,\r\n        comments: [...state.comments, action.payload],\r\n      };\r\n    case 'ADD_REPLY':\r\n      return {\r\n        ...state,\r\n        comments: state.comments.map((c) =>\r\n          c.id !== action.payload.commentId\r\n            ? c\r\n            : { ...c, replies: [...c.replies, action.payload.addedReply] }\r\n        ),\r\n      };\r\n    case 'EDIT_COMMENT':\r\n      return {\r\n        ...state,\r\n        comments: state.comments.map((c) =>\r\n          c.id !== action.payload.commentId\r\n            ? c\r\n            : { ...c, ...action.payload.data }\r\n        ),\r\n      };\r\n    case 'DELETE_COMMENT':\r\n      return {\r\n        ...state,\r\n        comments: state.comments.filter((c) => c.id !== action.payload),\r\n      };\r\n    case 'EDIT_REPLY':\r\n      return {\r\n        ...state,\r\n        comments: state.comments.map((c) =>\r\n          c.id !== action.payload.commentId\r\n            ? c\r\n            : {\r\n                ...c,\r\n                replies: c.replies.map((r) =>\r\n                  r.id !== action.payload.replyId\r\n                    ? r\r\n                    : { ...r, ...action.payload.data }\r\n                ),\r\n              }\r\n        ),\r\n      };\r\n    case 'DELETE_REPLY':\r\n      return {\r\n        ...state,\r\n        comments: state.comments.map((c) =>\r\n          c.id !== action.payload.commentId\r\n            ? c\r\n            : {\r\n                ...c,\r\n                replies: c.replies.filter(\r\n                  (r) => r.id !== action.payload.replyId\r\n                ),\r\n              }\r\n        ),\r\n      };\r\n    case 'SORT_COMMENTS':\r\n      return {\r\n        ...state,\r\n        comments: state.comments.sort((a, b) => {\r\n          switch (action.payload) {\r\n            case 'new':\r\n              return new Date(b.createdAt) - new Date(a.createdAt);\r\n            case 'upvoted':\r\n              return b.pointsCount - a.pointsCount;\r\n            case 'downvoted':\r\n              return a.pointsCount - b.pointsCount;\r\n            case 'replied':\r\n              return b.replies.length - a.replies.length;\r\n            default:\r\n              return new Date(a.createdAt) - new Date(b.createdAt);\r\n          }\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const fetchPostComments = (id) => {\r\n  return async (dispatch) => {\r\n    const fetchedPost = await postService.getPostComments(id);\r\n\r\n    dispatch({\r\n      type: 'FETCH_POST_COMMENTS',\r\n      payload: fetchedPost,\r\n    });\r\n  };\r\n};\r\n\r\nexport const createNewPost = (postObject) => {\r\n  return async (dispatch) => {\r\n    const addedPost = await postService.addNew(postObject);\r\n\r\n    dispatch({\r\n      type: 'CREATE_NEW_POST',\r\n      payload: addedPost,\r\n    });\r\n\r\n    return addedPost.id;\r\n  };\r\n};\r\n\r\nexport const updatePost = (id, postObject) => {\r\n  return async (dispatch) => {\r\n    const updatedPost = await postService.editPost(id, postObject);\r\n\r\n    dispatch({\r\n      type: 'UPDATE_POST',\r\n      payload: updatedPost,\r\n    });\r\n  };\r\n};\r\n\r\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\r\n  return async (dispatch) => {\r\n    let pointsCount = upvotedBy.length - downvotedBy.length;\r\n    if (pointsCount < 0) {\r\n      pointsCount = 0;\r\n    }\r\n\r\n    dispatch({\r\n      type: 'TOGGLE_VOTE',\r\n      payload: { upvotedBy, pointsCount, downvotedBy },\r\n    });\r\n\r\n    await postService.upvotePost(id);\r\n  };\r\n};\r\n\r\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\r\n  return async (dispatch) => {\r\n    let pointsCount = upvotedBy.length - downvotedBy.length;\r\n    if (pointsCount < 0) {\r\n      pointsCount = 0;\r\n    }\r\n\r\n    dispatch({\r\n      type: 'TOGGLE_VOTE',\r\n      payload: { upvotedBy, pointsCount, downvotedBy },\r\n    });\r\n\r\n    await postService.downvotePost(id);\r\n  };\r\n};\r\n\r\nexport const toggleCommentUpvote = (\r\n  postId,\r\n  commentId,\r\n  upvotedBy,\r\n  downvotedBy\r\n) => {\r\n  return async (dispatch) => {\r\n    const pointsCount = upvotedBy.length - downvotedBy.length;\r\n\r\n    dispatch({\r\n      type: 'VOTE_COMMENT',\r\n      payload: { commentId, data: { upvotedBy, pointsCount, downvotedBy } },\r\n    });\r\n\r\n    await postService.upvoteComment(postId, commentId);\r\n  };\r\n};\r\n\r\nexport const toggleCommentDownvote = (\r\n  postId,\r\n  commentId,\r\n  downvotedBy,\r\n  upvotedBy\r\n) => {\r\n  return async (dispatch) => {\r\n    const pointsCount = upvotedBy.length - downvotedBy.length;\r\n\r\n    dispatch({\r\n      type: 'VOTE_COMMENT',\r\n      payload: { commentId, data: { upvotedBy, pointsCount, downvotedBy } },\r\n    });\r\n\r\n    await postService.downvoteComment(postId, commentId);\r\n  };\r\n};\r\n\r\nexport const toggleReplyUpvote = (\r\n  postId,\r\n  commentId,\r\n  replyId,\r\n  upvotedBy,\r\n  downvotedBy\r\n) => {\r\n  return async (dispatch) => {\r\n    const pointsCount = upvotedBy.length - downvotedBy.length;\r\n\r\n    dispatch({\r\n      type: 'VOTE_REPLY',\r\n      payload: {\r\n        commentId,\r\n        replyId,\r\n        data: { upvotedBy, pointsCount, downvotedBy },\r\n      },\r\n    });\r\n\r\n    await postService.upvoteReply(postId, commentId, replyId);\r\n  };\r\n};\r\n\r\nexport const toggleReplyDownvote = (\r\n  postId,\r\n  commentId,\r\n  replyId,\r\n  downvotedBy,\r\n  upvotedBy\r\n) => {\r\n  return async (dispatch) => {\r\n    const pointsCount = upvotedBy.length - downvotedBy.length;\r\n\r\n    dispatch({\r\n      type: 'VOTE_REPLY',\r\n      payload: {\r\n        commentId,\r\n        replyId,\r\n        data: { upvotedBy, pointsCount, downvotedBy },\r\n      },\r\n    });\r\n\r\n    await postService.downvoteReply(postId, commentId, replyId);\r\n  };\r\n};\r\n\r\nexport const addComment = (postId, comment) => {\r\n  return async (dispatch) => {\r\n    const addedComment = await postService.postComment(postId, { comment });\r\n\r\n    dispatch({\r\n      type: 'ADD_COMMENT',\r\n      payload: addedComment,\r\n    });\r\n  };\r\n};\r\n\r\nexport const addReply = (postId, commentId, reply) => {\r\n  return async (dispatch) => {\r\n    const addedReply = await postService.postReply(postId, commentId, {\r\n      reply,\r\n    });\r\n\r\n    dispatch({\r\n      type: 'ADD_REPLY',\r\n      payload: { commentId, addedReply },\r\n    });\r\n  };\r\n};\r\n\r\nexport const editComment = (postId, commentId, comment) => {\r\n  return async (dispatch) => {\r\n    await postService.updateComment(postId, commentId, { comment });\r\n    const updatedAt = Date.now();\r\n\r\n    dispatch({\r\n      type: 'EDIT_COMMENT',\r\n      payload: { commentId, data: { updatedAt, commentBody: comment } },\r\n    });\r\n  };\r\n};\r\n\r\nexport const deleteComment = (postId, commentId) => {\r\n  return async (dispatch) => {\r\n    await postService.removeComment(postId, commentId);\r\n\r\n    dispatch({\r\n      type: 'DELETE_COMMENT',\r\n      payload: commentId,\r\n    });\r\n  };\r\n};\r\n\r\nexport const editReply = (postId, commentId, replyId, reply) => {\r\n  return async (dispatch) => {\r\n    await postService.updateReply(postId, commentId, replyId, { reply });\r\n    const updatedAt = Date.now();\r\n\r\n    dispatch({\r\n      type: 'EDIT_REPLY',\r\n      payload: { commentId, replyId, data: { updatedAt, replyBody: reply } },\r\n    });\r\n  };\r\n};\r\n\r\nexport const deleteReply = (postId, commentId, replyId) => {\r\n  return async (dispatch) => {\r\n    await postService.removeReply(postId, commentId, replyId);\r\n\r\n    dispatch({\r\n      type: 'DELETE_REPLY',\r\n      payload: { commentId, replyId },\r\n    });\r\n  };\r\n};\r\n\r\nexport const sortComments = (sortBy) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: 'SORT_COMMENTS',\r\n      payload: sortBy,\r\n    });\r\n  };\r\n};\r\n\r\nexport default postPageReducer;\r\n"]},"metadata":{},"sourceType":"module"}