{"ast":null,"code":"import subService from '../services/subs';\nimport postService from '../services/posts';\n\nconst subPageReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCH_SUB':\n      return action.payload;\n\n    case 'LOAD_SUB_POSTS':\n      return { ...state,\n        posts: { ...action.payload.posts,\n          results: [...state.posts.results, ...action.payload.posts.results]\n        }\n      };\n\n    case 'TOGGLE_SUBPAGE_VOTE':\n      return { ...state,\n        posts: { ...state.posts,\n          results: state.posts.results.map(p => p.id !== action.payload.id ? p : { ...p,\n            ...action.payload.data\n          })\n        }\n      };\n\n    case 'SUBSCRIBE_SUB':\n      return { ...state,\n        subDetails: { ...state.subDetails,\n          ...action.payload\n        }\n      };\n\n    case 'EDIT_DESCRIPTION':\n      return { ...state,\n        subDetails: { ...state.subDetails,\n          description: action.payload\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const fetchSub = (subredditName, sortBy) => {\n  return async dispatch => {\n    const sub = await subService.getSubreddit(subredditName, sortBy, 10, 1);\n    dispatch({\n      type: 'FETCH_SUB',\n      payload: sub\n    });\n  };\n};\nexport const loadSubPosts = (subredditName, sortBy, page) => {\n  return async dispatch => {\n    const sub = await subService.getSubreddit(subredditName, sortBy, 10, page);\n    dispatch({\n      type: 'LOAD_SUB_POSTS',\n      payload: sub\n    });\n  };\n};\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_SUBPAGE_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.upvotePost(id);\n  };\n};\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_SUBPAGE_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.downvotePost(id);\n  };\n};\nexport const toggleSubscribe = (id, subscribedBy) => {\n  return async dispatch => {\n    const subscriberCount = subscribedBy.length;\n    dispatch({\n      type: 'SUBSCRIBE_SUB',\n      payload: {\n        subscribedBy,\n        subscriberCount\n      }\n    });\n    await subService.subscribeSub(id);\n  };\n};\nexport const editDescription = (id, description) => {\n  return async dispatch => {\n    await subService.updateDescription(id, {\n      description\n    });\n    dispatch({\n      type: 'EDIT_DESCRIPTION',\n      payload: description\n    });\n  };\n};\nexport default subPageReducer;","map":{"version":3,"sources":["C:/Users/1/Desktop/bloom_app/client/src/reducers/subPageReducer.js"],"names":["subService","postService","subPageReducer","state","action","type","payload","posts","results","map","p","id","data","subDetails","description","fetchSub","subredditName","sortBy","dispatch","sub","getSubreddit","loadSubPosts","page","toggleUpvote","upvotedBy","downvotedBy","pointsCount","length","upvotePost","toggleDownvote","downvotePost","toggleSubscribe","subscribedBy","subscriberCount","subscribeSub","editDescription","updateDescription"],"mappings":"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","sourcesContent":["import subService from '../services/subs';\r\nimport postService from '../services/posts';\r\n\r\nconst subPageReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_SUB':\r\n      return action.payload;\r\n    case 'LOAD_SUB_POSTS':\r\n      return {\r\n        ...state,\r\n        posts: {\r\n          ...action.payload.posts,\r\n          results: [...state.posts.results, ...action.payload.posts.results],\r\n        },\r\n      };\r\n    case 'TOGGLE_SUBPAGE_VOTE':\r\n      return {\r\n        ...state,\r\n        posts: {\r\n          ...state.posts,\r\n          results: state.posts.results.map((p) =>\r\n            p.id !== action.payload.id ? p : { ...p, ...action.payload.data }\r\n          ),\r\n        },\r\n      };\r\n    case 'SUBSCRIBE_SUB':\r\n      return {\r\n        ...state,\r\n        subDetails: { ...state.subDetails, ...action.payload },\r\n      };\r\n    case 'EDIT_DESCRIPTION':\r\n      return {\r\n        ...state,\r\n        subDetails: { ...state.subDetails, description: action.payload },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const fetchSub = (subredditName, sortBy) => {\r\n  return async (dispatch) => {\r\n    const sub = await subService.getSubreddit(subredditName, sortBy, 10, 1);\r\n\r\n    dispatch({\r\n      type: 'FETCH_SUB',\r\n      payload: sub,\r\n    });\r\n  };\r\n};\r\n\r\nexport const loadSubPosts = (subredditName, sortBy, page) => {\r\n  return async (dispatch) => {\r\n    const sub = await subService.getSubreddit(subredditName, sortBy, 10, page);\r\n\r\n    dispatch({\r\n      type: 'LOAD_SUB_POSTS',\r\n      payload: sub,\r\n    });\r\n  };\r\n};\r\n\r\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\r\n  return async (dispatch) => {\r\n    let pointsCount = upvotedBy.length - downvotedBy.length;\r\n    if (pointsCount < 0) {\r\n      pointsCount = 0;\r\n    }\r\n\r\n    dispatch({\r\n      type: 'TOGGLE_SUBPAGE_VOTE',\r\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\r\n    });\r\n\r\n    await postService.upvotePost(id);\r\n  };\r\n};\r\n\r\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\r\n  return async (dispatch) => {\r\n    let pointsCount = upvotedBy.length - downvotedBy.length;\r\n    if (pointsCount < 0) {\r\n      pointsCount = 0;\r\n    }\r\n\r\n    dispatch({\r\n      type: 'TOGGLE_SUBPAGE_VOTE',\r\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\r\n    });\r\n\r\n    await postService.downvotePost(id);\r\n  };\r\n};\r\n\r\nexport const toggleSubscribe = (id, subscribedBy) => {\r\n  return async (dispatch) => {\r\n    const subscriberCount = subscribedBy.length;\r\n\r\n    dispatch({\r\n      type: 'SUBSCRIBE_SUB',\r\n      payload: { subscribedBy, subscriberCount },\r\n    });\r\n\r\n    await subService.subscribeSub(id);\r\n  };\r\n};\r\n\r\nexport const editDescription = (id, description) => {\r\n  return async (dispatch) => {\r\n    await subService.updateDescription(id, { description });\r\n\r\n    dispatch({\r\n      type: 'EDIT_DESCRIPTION',\r\n      payload: description,\r\n    });\r\n  };\r\n};\r\n\r\nexport default subPageReducer;\r\n"]},"metadata":{},"sourceType":"module"}