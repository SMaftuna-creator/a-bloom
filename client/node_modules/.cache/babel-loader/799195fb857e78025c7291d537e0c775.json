{"ast":null,"code":"import subService from '../services/subs';\n\nconst subReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_ALL_SUBS_LIST':\n      return { ...state,\n        allSubs: action.payload\n      };\n\n    case 'SET_TOP_SUBS_LIST':\n      return { ...state,\n        topSubs: action.payload\n      };\n\n    case 'SUBSCRIBE_SUB_FROM_LIST':\n      return { ...state,\n        topSubs: state.topSubs.map(t => t.id !== action.payload.id ? t : { ...t,\n          ...action.payload.data\n        })\n      };\n\n    case 'ADD_NEW_SUB':\n      return { ...state,\n        allSubs: [...state.allSubs, action.payload]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setSubList = () => {\n  return async dispatch => {\n    const subs = await subService.getAllSubreddits();\n    dispatch({\n      type: 'SET_ALL_SUBS_LIST',\n      payload: subs\n    });\n  };\n};\nexport const setTopSubsList = () => {\n  return async dispatch => {\n    const top10Subs = await subService.getTopSubreddits();\n    dispatch({\n      type: 'SET_TOP_SUBS_LIST',\n      payload: top10Subs\n    });\n  };\n};\nexport const toggleSubscribe = (id, subscribedBy) => {\n  return async dispatch => {\n    const subscriberCount = subscribedBy.length;\n    dispatch({\n      type: 'SUBSCRIBE_SUB_FROM_LIST',\n      payload: {\n        id,\n        data: {\n          subscribedBy,\n          subscriberCount\n        }\n      }\n    });\n    await subService.subscribeSub(id);\n  };\n};\nexport const addNewSub = subredditObj => {\n  return async dispatch => {\n    const createdSub = await subService.createSubreddit(subredditObj);\n    dispatch({\n      type: 'ADD_NEW_SUB',\n      payload: {\n        subredditName: createdSub.subredditName,\n        id: createdSub.id\n      }\n    });\n  };\n};\nexport default subReducer;","map":{"version":3,"sources":["C:/Users/1/Desktop/a-bloom/client/src/reducers/subReducer.js"],"names":["subService","subReducer","state","action","type","allSubs","payload","topSubs","map","t","id","data","setSubList","dispatch","subs","getAllSubreddits","setTopSubsList","top10Subs","getTopSubreddits","toggleSubscribe","subscribedBy","subscriberCount","length","subscribeSub","addNewSub","subredditObj","createdSub","createSubreddit","subredditName"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;;AAEA,MAAMC,UAAU,GAAG,YAA0B;AAAA,MAAzBC,KAAyB,uEAAjB,IAAiB;AAAA,MAAXC,MAAW;;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,mBAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYG,QAAAA,OAAO,EAAEF,MAAM,CAACG;AAA5B,OAAP;;AACF,SAAK,mBAAL;AACE,aAAO,EAAE,GAAGJ,KAAL;AAAYK,QAAAA,OAAO,EAAEJ,MAAM,CAACG;AAA5B,OAAP;;AACF,SAAK,yBAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELK,QAAAA,OAAO,EAAEL,KAAK,CAACK,OAAN,CAAcC,GAAd,CAAmBC,CAAD,IACzBA,CAAC,CAACC,EAAF,KAASP,MAAM,CAACG,OAAP,CAAeI,EAAxB,GAA6BD,CAA7B,GAAiC,EAAE,GAAGA,CAAL;AAAQ,aAAGN,MAAM,CAACG,OAAP,CAAeK;AAA1B,SAD1B;AAFJ,OAAP;;AAMF,SAAK,aAAL;AACE,aAAO,EACL,GAAGT,KADE;AAELG,QAAAA,OAAO,EAAE,CAAC,GAAGH,KAAK,CAACG,OAAV,EAAmBF,MAAM,CAACG,OAA1B;AAFJ,OAAP;;AAIF;AACE,aAAOJ,KAAP;AAlBJ;AAoBD,CArBD;;AAuBA,OAAO,MAAMU,UAAU,GAAG,MAAM;AAC9B,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,IAAI,GAAG,MAAMd,UAAU,CAACe,gBAAX,EAAnB;AAEAF,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,mBADC;AAEPE,MAAAA,OAAO,EAAEQ;AAFF,KAAD,CAAR;AAID,GAPD;AAQD,CATM;AAWP,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO,MAAOH,QAAP,IAAoB;AACzB,UAAMI,SAAS,GAAG,MAAMjB,UAAU,CAACkB,gBAAX,EAAxB;AAEAL,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,mBADC;AAEPE,MAAAA,OAAO,EAAEW;AAFF,KAAD,CAAR;AAID,GAPD;AAQD,CATM;AAWP,OAAO,MAAME,eAAe,GAAG,CAACT,EAAD,EAAKU,YAAL,KAAsB;AACnD,SAAO,MAAOP,QAAP,IAAoB;AACzB,UAAMQ,eAAe,GAAGD,YAAY,CAACE,MAArC;AAEAT,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,yBADC;AAEPE,MAAAA,OAAO,EAAE;AAAEI,QAAAA,EAAF;AAAMC,QAAAA,IAAI,EAAE;AAAES,UAAAA,YAAF;AAAgBC,UAAAA;AAAhB;AAAZ;AAFF,KAAD,CAAR;AAKA,UAAMrB,UAAU,CAACuB,YAAX,CAAwBb,EAAxB,CAAN;AACD,GATD;AAUD,CAXM;AAaP,OAAO,MAAMc,SAAS,GAAIC,YAAD,IAAkB;AACzC,SAAO,MAAOZ,QAAP,IAAoB;AACzB,UAAMa,UAAU,GAAG,MAAM1B,UAAU,CAAC2B,eAAX,CAA2BF,YAA3B,CAAzB;AAEAZ,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,aADC;AAEPE,MAAAA,OAAO,EAAE;AACPsB,QAAAA,aAAa,EAAEF,UAAU,CAACE,aADnB;AAEPlB,QAAAA,EAAE,EAAEgB,UAAU,CAAChB;AAFR;AAFF,KAAD,CAAR;AAOD,GAVD;AAWD,CAZM;AAcP,eAAeT,UAAf","sourcesContent":["import subService from '../services/subs';\r\n\r\nconst subReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n    case 'SET_ALL_SUBS_LIST':\r\n      return { ...state, allSubs: action.payload };\r\n    case 'SET_TOP_SUBS_LIST':\r\n      return { ...state, topSubs: action.payload };\r\n    case 'SUBSCRIBE_SUB_FROM_LIST':\r\n      return {\r\n        ...state,\r\n        topSubs: state.topSubs.map((t) =>\r\n          t.id !== action.payload.id ? t : { ...t, ...action.payload.data }\r\n        ),\r\n      };\r\n    case 'ADD_NEW_SUB':\r\n      return {\r\n        ...state,\r\n        allSubs: [...state.allSubs, action.payload],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setSubList = () => {\r\n  return async (dispatch) => {\r\n    const subs = await subService.getAllSubreddits();\r\n\r\n    dispatch({\r\n      type: 'SET_ALL_SUBS_LIST',\r\n      payload: subs,\r\n    });\r\n  };\r\n};\r\n\r\nexport const setTopSubsList = () => {\r\n  return async (dispatch) => {\r\n    const top10Subs = await subService.getTopSubreddits();\r\n\r\n    dispatch({\r\n      type: 'SET_TOP_SUBS_LIST',\r\n      payload: top10Subs,\r\n    });\r\n  };\r\n};\r\n\r\nexport const toggleSubscribe = (id, subscribedBy) => {\r\n  return async (dispatch) => {\r\n    const subscriberCount = subscribedBy.length;\r\n\r\n    dispatch({\r\n      type: 'SUBSCRIBE_SUB_FROM_LIST',\r\n      payload: { id, data: { subscribedBy, subscriberCount } },\r\n    });\r\n\r\n    await subService.subscribeSub(id);\r\n  };\r\n};\r\n\r\nexport const addNewSub = (subredditObj) => {\r\n  return async (dispatch) => {\r\n    const createdSub = await subService.createSubreddit(subredditObj);\r\n\r\n    dispatch({\r\n      type: 'ADD_NEW_SUB',\r\n      payload: {\r\n        subredditName: createdSub.subredditName,\r\n        id: createdSub.id,\r\n      },\r\n    });\r\n  };\r\n};\r\n\r\nexport default subReducer;\r\n"]},"metadata":{},"sourceType":"module"}