{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\a-bloom\\\\client\\\\src\\\\components\\\\CommentInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { addComment } from '../reducers/postCommentsReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { Link, Typography, TextField, Button } from '@material-ui/core';\nimport { useCommentInputStyles } from '../styles/muiStyles';\nimport SendIcon from '@material-ui/icons/Send';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CommentInput = _ref => {\n  _s();\n\n  let {\n    user,\n    postId,\n    isMobile\n  } = _ref;\n  const classes = useCommentInputStyles();\n  const dispatch = useDispatch();\n  const [comment, setComment] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n\n  const handlePostComment = async e => {\n    e.preventDefault();\n\n    try {\n      setSubmitting(true);\n      await dispatch(addComment(postId, comment));\n      setSubmitting(false);\n      setComment('');\n      dispatch(notify(`Comment submitted!`, 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.wrapper,\n    children: [user ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      children: [\"Comment as\", ' ', /*#__PURE__*/_jsxDEV(Link, {\n        component: RouterLink,\n        to: `/u/${user.username}`,\n        children: user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: \"Log in or sign up to leave a comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: handlePostComment,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        placeholder: `What are your thoughts?`,\n        multiline: true,\n        fullWidth: true,\n        required: true,\n        rows: 4,\n        rowsMax: Infinity,\n        value: comment,\n        onChange: e => setComment(e.target.value),\n        variant: \"outlined\",\n        size: isMobile ? 'small' : 'medium'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        color: \"primary\",\n        variant: \"contained\",\n        className: classes.commentBtn,\n        startIcon: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 22\n        }, this),\n        size: isMobile ? 'small' : 'medium',\n        disabled: !user || submitting,\n        children: !user ? 'Login to comment' : submitting ? 'Commenting' : 'Comment'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CommentInput, \"btuTHi0JyVzdVpxmx0T3wFNZr/U=\", false, function () {\n  return [useCommentInputStyles, useDispatch];\n});\n\n_c = CommentInput;\nexport default CommentInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentInput\");","map":{"version":3,"sources":["C:/Users/1/Desktop/a-bloom/client/src/components/CommentInput.js"],"names":["React","useState","Link","RouterLink","useDispatch","addComment","notify","getErrorMsg","Typography","TextField","Button","useCommentInputStyles","SendIcon","CommentInput","user","postId","isMobile","classes","dispatch","comment","setComment","submitting","setSubmitting","handlePostComment","e","preventDefault","err","wrapper","username","form","Infinity","target","value","commentBtn"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addComment } from '../reducers/postCommentsReducer';\r\nimport { notify } from '../reducers/notificationReducer';\r\nimport getErrorMsg from '../utils/getErrorMsg';\r\n\r\nimport { Link, Typography, TextField, Button } from '@material-ui/core';\r\nimport { useCommentInputStyles } from '../styles/muiStyles';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nconst CommentInput = ({ user, postId, isMobile }) => {\r\n  const classes = useCommentInputStyles();\r\n  const dispatch = useDispatch();\r\n  const [comment, setComment] = useState('');\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const handlePostComment = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(addComment(postId, comment));\r\n      setSubmitting(false);\r\n      setComment('');\r\n      dispatch(notify(`Comment submitted!`, 'success'));\r\n    } catch (err) {\r\n      setSubmitting(false);\r\n      dispatch(notify(getErrorMsg(err), 'error'));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      {user ? (\r\n        <Typography variant=\"body2\">\r\n          Comment as{' '}\r\n          <Link component={RouterLink} to={`/u/${user.username}`}>\r\n            {user.username}\r\n          </Link>\r\n        </Typography>\r\n      ) : (\r\n        <Typography variant=\"body1\">\r\n          Log in or sign up to leave a comment\r\n        </Typography>\r\n      )}\r\n      <form className={classes.form} onSubmit={handlePostComment}>\r\n        <TextField\r\n          placeholder={`What are your thoughts?`}\r\n          multiline\r\n          fullWidth\r\n          required\r\n          rows={4}\r\n          rowsMax={Infinity}\r\n          value={comment}\r\n          onChange={(e) => setComment(e.target.value)}\r\n          variant=\"outlined\"\r\n          size={isMobile ? 'small' : 'medium'}\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          className={classes.commentBtn}\r\n          startIcon={<SendIcon />}\r\n          size={isMobile ? 'small' : 'medium'}\r\n          disabled={!user || submitting}\r\n        >\r\n          {!user ? 'Login to comment' : submitting ? 'Commenting' : 'Comment'}\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommentInput;\r\n"]},"metadata":{},"sourceType":"module"}