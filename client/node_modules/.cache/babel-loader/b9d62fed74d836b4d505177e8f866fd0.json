{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\clnblm\\\\a-bloom\\\\client\\\\src\\\\components\\\\SubForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { addNewSub } from '../reducers/subReducer';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport { notify } from '../reducers/notificationReducer';\nimport AlertMessage from './AlertMessage';\nimport * as yup from 'yup';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { useSubredditFormStyles } from '../styles/muiStyles';\nimport { Button, Typography } from '@material-ui/core';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AddIcon from '@material-ui/icons/Add';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  subredditName: yup.string().required('Required').max(20, 'Must be at most 20 characters').min(3, 'Must be at least 3 characters').matches(/^[a-zA-Z0-9-_]*$/, 'Only alphanumeric characters allowed, no spaces/symbols'),\n  description: yup.string().required('Required').max(100, 'Must be at most 100 characters').min(3, 'Must be at least 3 characters')\n});\n\nconst SubForm = () => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const classes = useSubredditFormStyles();\n  const history = useHistory();\n\n  const handleCreateSub = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n\n    try {\n      setSubmitting(true);\n      await dispatch(addNewSub(values));\n      setSubmitting(false);\n      dispatch(notify(`New community created: b/${values.subredditName}`, 'success'));\n      history.push(`/b/${values.subredditName}`);\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.formWrapper,\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      validateOnChange: true,\n      initialValues: {\n        subredditName: '',\n        description: ''\n      },\n      onSubmit: handleCreateSub,\n      validationSchema: validationSchema,\n      children: _ref2 => {\n        let {\n          isSubmitting\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          className: classes.form,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.input,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.inputIconText,\n              color: \"primary\",\n              variant: \"h5\",\n              children: \"b/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n              name: \"subredditName\",\n              type: \"text\",\n              placeholder: \"Enter name\",\n              label: \"Community Name\",\n              required: true,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.descInput,\n            children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n              className: classes.inputIcon,\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n              name: \"description\",\n              type: \"text\",\n              placeholder: \"Enter description\",\n              label: \"Description\",\n              required: true,\n              fullWidth: true,\n              variant: \"outlined\",\n              multiline: true,\n              rows: 2,\n              maxRows: Infinity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            color: \"secondary\",\n            variant: \"contained\",\n            size: \"large\",\n            className: classes.submitButton,\n            disabled: isSubmitting,\n            startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 26\n            }, this),\n            children: isSubmitting ? 'Creating' : 'Create Community'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlertMessage, {\n      error: error,\n      severity: \"error\",\n      clearError: () => setError(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SubForm, \"AXAcx1Sv0BzJLZitFzTAf6zWQo4=\", false, function () {\n  return [useDispatch, useSubredditFormStyles, useHistory];\n});\n\n_c = SubForm;\nexport default SubForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubForm\");","map":{"version":3,"sources":["C:/Users/1/Desktop/clnblm/a-bloom/client/src/components/SubForm.js"],"names":["React","useState","useDispatch","useHistory","addNewSub","Formik","Form","TextInput","notify","AlertMessage","yup","getErrorMsg","useSubredditFormStyles","Button","Typography","InfoIcon","AddIcon","validationSchema","object","subredditName","string","required","max","min","matches","description","SubForm","error","setError","dispatch","classes","history","handleCreateSub","values","setSubmitting","push","err","formWrapper","isSubmitting","form","input","inputIconText","descInput","inputIcon","Infinity","submitButton"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { addNewSub } from '../reducers/subReducer';\r\nimport { Formik, Form } from 'formik';\r\nimport { TextInput } from './FormikMuiFields';\r\nimport { notify } from '../reducers/notificationReducer';\r\nimport AlertMessage from './AlertMessage';\r\nimport * as yup from 'yup';\r\nimport getErrorMsg from '../utils/getErrorMsg';\r\n\r\nimport { useSubredditFormStyles } from '../styles/muiStyles';\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nconst validationSchema = yup.object({\r\n  subredditName: yup\r\n    .string()\r\n    .required('Required')\r\n    .max(20, 'Must be at most 20 characters')\r\n    .min(3, 'Must be at least 3 characters')\r\n    .matches(\r\n      /^[a-zA-Z0-9-_]*$/,\r\n      'Only alphanumeric characters allowed, no spaces/symbols'\r\n    ),\r\n  description: yup\r\n    .string()\r\n    .required('Required')\r\n    .max(100, 'Must be at most 100 characters')\r\n    .min(3, 'Must be at least 3 characters'),\r\n});\r\n\r\nconst SubForm = () => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const classes = useSubredditFormStyles();\r\n  const history = useHistory();\r\n\r\n  const handleCreateSub = async (values, { setSubmitting }) => {\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(addNewSub(values));\r\n      setSubmitting(false);\r\n      dispatch(\r\n        notify(`New community created: b/${values.subredditName}`, 'success')\r\n      );\r\n      history.push(`/b/${values.subredditName}`);\r\n    } catch (err) {\r\n      setSubmitting(false);\r\n      dispatch(notify(getErrorMsg(err), 'error'));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.formWrapper}>\r\n      <Formik\r\n        validateOnChange={true}\r\n        initialValues={{ subredditName: '', description: '' }}\r\n        onSubmit={handleCreateSub}\r\n        validationSchema={validationSchema}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form className={classes.form}>\r\n            <div className={classes.input}>\r\n              <Typography\r\n                className={classes.inputIconText}\r\n                color=\"primary\"\r\n                variant=\"h5\"\r\n              >\r\n                b/\r\n              </Typography>\r\n              <TextInput\r\n                name=\"subredditName\"\r\n                type=\"text\"\r\n                placeholder=\"Enter name\"\r\n                label=\"Community Name\"\r\n                required\r\n                fullWidth\r\n              />\r\n            </div>\r\n            <div className={classes.descInput}>\r\n              <InfoIcon className={classes.inputIcon} color=\"primary\" />\r\n              <TextInput\r\n                name=\"description\"\r\n                type=\"text\"\r\n                placeholder=\"Enter description\"\r\n                label=\"Description\"\r\n                required\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                multiline\r\n                rows={2}\r\n                maxRows={Infinity}\r\n              />\r\n            </div>\r\n            <Button\r\n              type=\"submit\"\r\n              color=\"secondary\"\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              className={classes.submitButton}\r\n              disabled={isSubmitting}\r\n              startIcon={<AddIcon />}\r\n            >\r\n              {isSubmitting ? 'Creating' : 'Create Community'}\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      <AlertMessage\r\n        error={error}\r\n        severity=\"error\"\r\n        clearError={() => setError(null)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubForm;\r\n"]},"metadata":{},"sourceType":"module"}