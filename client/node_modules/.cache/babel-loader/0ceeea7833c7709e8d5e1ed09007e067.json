{"ast":null,"code":"import postService from '../services/posts';\n\nconst postReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_POSTS':\n      return action.payload;\n\n    case 'LOAD_MORE_POSTS':\n      return { ...action.payload,\n        results: [...state.results, ...action.payload.results]\n      };\n\n    case 'TOGGLE_VOTE':\n      return { ...state,\n        results: state.results.map(r => r.id !== action.payload.id ? r : { ...r,\n          ...action.payload.data\n        })\n      };\n\n    case 'DELETE_POST':\n      return { ...state,\n        results: state.results.filter(r => r.id !== action.payload)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const fetchPosts = sortBy => {\n  return async dispatch => {\n    let posts;\n\n    if (sortBy !== 'subscribed') {\n      posts = await postService.getPosts(sortBy, 10, 1);\n    } else {\n      posts = await postService.getSubPosts(10, 1);\n    }\n\n    dispatch({\n      type: 'SET_POSTS',\n      payload: posts\n    });\n  };\n};\nexport const loadMorePosts = (sortBy, page) => {\n  return async dispatch => {\n    let posts;\n\n    if (sortBy !== 'subscribed') {\n      posts = await postService.getPosts(sortBy, 10, page);\n    } else {\n      posts = await postService.getSubPosts(10, page);\n    }\n\n    dispatch({\n      type: 'LOAD_MORE_POSTS',\n      payload: posts\n    });\n  };\n};\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.upvotePost(id);\n  };\n};\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.downvotePost(id);\n  };\n};\nexport const removePost = id => {\n  return async dispatch => {\n    await postService.deletePost(id);\n    dispatch({\n      type: 'DELETE_POST',\n      payload: id\n    });\n  };\n};\nexport default postReducer;","map":{"version":3,"sources":["C:/Users/1/Desktop/clnblm/a-bloom/client/src/reducers/postReducer.js"],"names":["postService","postReducer","state","action","type","payload","results","map","r","id","data","filter","fetchPosts","sortBy","dispatch","posts","getPosts","getSubPosts","loadMorePosts","page","toggleUpvote","upvotedBy","downvotedBy","pointsCount","length","upvotePost","toggleDownvote","downvotePost","removePost","deletePost"],"mappings":"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","sourcesContent":["import postService from '../services/posts';\r\n\r\nconst postReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n    case 'SET_POSTS':\r\n      return action.payload;\r\n    case 'LOAD_MORE_POSTS':\r\n      return {\r\n        ...action.payload,\r\n        results: [...state.results, ...action.payload.results],\r\n      };\r\n    case 'TOGGLE_VOTE':\r\n      return {\r\n        ...state,\r\n        results: state.results.map((r) =>\r\n          r.id !== action.payload.id ? r : { ...r, ...action.payload.data }\r\n        ),\r\n      };\r\n    case 'DELETE_POST':\r\n      return {\r\n        ...state,\r\n        results: state.results.filter((r) => r.id !== action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const fetchPosts = (sortBy) => {\r\n  return async (dispatch) => {\r\n    let posts;\r\n\r\n    if (sortBy !== 'subscribed') {\r\n      posts = await postService.getPosts(sortBy, 10, 1);\r\n    } else {\r\n      posts = await postService.getSubPosts(10, 1);\r\n    }\r\n\r\n    dispatch({\r\n      type: 'SET_POSTS',\r\n      payload: posts,\r\n    });\r\n  };\r\n};\r\n\r\nexport const loadMorePosts = (sortBy, page) => {\r\n  return async (dispatch) => {\r\n    let posts;\r\n    if (sortBy !== 'subscribed') {\r\n      posts = await postService.getPosts(sortBy, 10, page);\r\n    } else {\r\n      posts = await postService.getSubPosts(10, page);\r\n    }\r\n\r\n    dispatch({\r\n      type: 'LOAD_MORE_POSTS',\r\n      payload: posts,\r\n    });\r\n  };\r\n};\r\n\r\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\r\n  return async (dispatch) => {\r\n    let pointsCount = upvotedBy.length - downvotedBy.length;\r\n    if (pointsCount < 0) {\r\n      pointsCount = 0;\r\n    }\r\n\r\n    dispatch({\r\n      type: 'TOGGLE_VOTE',\r\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\r\n    });\r\n\r\n    await postService.upvotePost(id);\r\n  };\r\n};\r\n\r\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\r\n  return async (dispatch) => {\r\n    let pointsCount = upvotedBy.length - downvotedBy.length;\r\n    if (pointsCount < 0) {\r\n      pointsCount = 0;\r\n    }\r\n\r\n    dispatch({\r\n      type: 'TOGGLE_VOTE',\r\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\r\n    });\r\n\r\n    await postService.downvotePost(id);\r\n  };\r\n};\r\n\r\nexport const removePost = (id) => {\r\n  return async (dispatch) => {\r\n    await postService.deletePost(id);\r\n\r\n    dispatch({\r\n      type: 'DELETE_POST',\r\n      payload: id,\r\n    });\r\n  };\r\n};\r\n\r\nexport default postReducer;\r\n"]},"metadata":{},"sourceType":"module"}