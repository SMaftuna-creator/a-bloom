{"ast":null,"code":"var isMergeableObject = function isMergeableObject(value) {\n  return isNonNullObject(value) && !isSpecial(value);\n};\n\nfunction isNonNullObject(value) {\n  return !!value && typeof value === 'object';\n}\n\nfunction isSpecial(value) {\n  var stringValue = Object.prototype.toString.call(value);\n  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);\n} // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\n\n\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n  return value.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nfunction emptyTarget(val) {\n  return Array.isArray(val) ? [] : {};\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n}\n\nfunction defaultArrayMerge(target, source, options) {\n  return target.concat(source).map(function (element) {\n    return cloneUnlessOtherwiseSpecified(element, options);\n  });\n}\n\nfunction mergeObject(target, source, options) {\n  var destination = {};\n\n  if (options.isMergeableObject(target)) {\n    Object.keys(target).forEach(function (key) {\n      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n    });\n  }\n\n  Object.keys(source).forEach(function (key) {\n    if (!options.isMergeableObject(source[key]) || !target[key]) {\n      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n    } else {\n      destination[key] = deepmerge(target[key], source[key], options);\n    }\n  });\n  return destination;\n}\n\nfunction deepmerge(target, source, options) {\n  options = options || {};\n  options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n  options.isMergeableObject = options.isMergeableObject || isMergeableObject;\n  var sourceIsArray = Array.isArray(source);\n  var targetIsArray = Array.isArray(target);\n  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n  if (!sourceAndTargetTypesMatch) {\n    return cloneUnlessOtherwiseSpecified(source, options);\n  } else if (sourceIsArray) {\n    return options.arrayMerge(target, source, options);\n  } else {\n    return mergeObject(target, source, options);\n  }\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n  if (!Array.isArray(array)) {\n    throw new Error('first argument should be an array');\n  }\n\n  return array.reduce(function (prev, next) {\n    return deepmerge(prev, next, options);\n  }, {});\n};\n\nvar deepmerge_1 = deepmerge;\nexport default deepmerge_1;","map":{"version":3,"sources":["C:/Users/1/Desktop/bloom_app/client/node_modules/formik/node_modules/deepmerge/dist/es.js"],"names":["isMergeableObject","value","isNonNullObject","isSpecial","stringValue","Object","prototype","toString","call","isReactElement","canUseSymbol","Symbol","for","REACT_ELEMENT_TYPE","$$typeof","emptyTarget","val","Array","isArray","cloneUnlessOtherwiseSpecified","options","clone","deepmerge","defaultArrayMerge","target","source","concat","map","element","mergeObject","destination","keys","forEach","key","arrayMerge","sourceIsArray","targetIsArray","sourceAndTargetTypesMatch","all","deepmergeAll","array","Error","reduce","prev","next","deepmerge_1"],"mappings":"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","sourcesContent":["var isMergeableObject = function isMergeableObject(value) {\r\n\treturn isNonNullObject(value)\r\n\t\t&& !isSpecial(value)\r\n};\r\n\r\nfunction isNonNullObject(value) {\r\n\treturn !!value && typeof value === 'object'\r\n}\r\n\r\nfunction isSpecial(value) {\r\n\tvar stringValue = Object.prototype.toString.call(value);\r\n\r\n\treturn stringValue === '[object RegExp]'\r\n\t\t|| stringValue === '[object Date]'\r\n\t\t|| isReactElement(value)\r\n}\r\n\r\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\r\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\r\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\r\n\r\nfunction isReactElement(value) {\r\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\r\n}\r\n\r\nfunction emptyTarget(val) {\r\n\treturn Array.isArray(val) ? [] : {}\r\n}\r\n\r\nfunction cloneUnlessOtherwiseSpecified(value, options) {\r\n\treturn (options.clone !== false && options.isMergeableObject(value))\r\n\t\t? deepmerge(emptyTarget(value), value, options)\r\n\t\t: value\r\n}\r\n\r\nfunction defaultArrayMerge(target, source, options) {\r\n\treturn target.concat(source).map(function(element) {\r\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\r\n\t})\r\n}\r\n\r\nfunction mergeObject(target, source, options) {\r\n\tvar destination = {};\r\n\tif (options.isMergeableObject(target)) {\r\n\t\tObject.keys(target).forEach(function(key) {\r\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\r\n\t\t});\r\n\t}\r\n\tObject.keys(source).forEach(function(key) {\r\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\r\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\r\n\t\t} else {\r\n\t\t\tdestination[key] = deepmerge(target[key], source[key], options);\r\n\t\t}\r\n\t});\r\n\treturn destination\r\n}\r\n\r\nfunction deepmerge(target, source, options) {\r\n\toptions = options || {};\r\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\r\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\r\n\r\n\tvar sourceIsArray = Array.isArray(source);\r\n\tvar targetIsArray = Array.isArray(target);\r\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\r\n\r\n\tif (!sourceAndTargetTypesMatch) {\r\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\r\n\t} else if (sourceIsArray) {\r\n\t\treturn options.arrayMerge(target, source, options)\r\n\t} else {\r\n\t\treturn mergeObject(target, source, options)\r\n\t}\r\n}\r\n\r\ndeepmerge.all = function deepmergeAll(array, options) {\r\n\tif (!Array.isArray(array)) {\r\n\t\tthrow new Error('first argument should be an array')\r\n\t}\r\n\r\n\treturn array.reduce(function(prev, next) {\r\n\t\treturn deepmerge(prev, next, options)\r\n\t}, {})\r\n};\r\n\r\nvar deepmerge_1 = deepmerge;\r\n\r\nexport default deepmerge_1;\r\n"]},"metadata":{},"sourceType":"module"}