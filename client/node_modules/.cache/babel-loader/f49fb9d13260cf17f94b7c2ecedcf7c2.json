{"ast":null,"code":"import { getter } from 'property-expr';\nconst prefixes = {\n  context: '$',\n  value: '.'\n};\nexport function create(key, options) {\n  return new Reference(key, options);\n}\nexport default class Reference {\n  constructor(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.key = void 0;\n    this.isContext = void 0;\n    this.isValue = void 0;\n    this.isSibling = void 0;\n    this.path = void 0;\n    this.getter = void 0;\n    this.map = void 0;\n    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);\n    this.key = key.trim();\n    if (key === '') throw new TypeError('ref must be a non-empty string');\n    this.isContext = this.key[0] === prefixes.context;\n    this.isValue = this.key[0] === prefixes.value;\n    this.isSibling = !this.isContext && !this.isValue;\n    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';\n    this.path = this.key.slice(prefix.length);\n    this.getter = this.path && getter(this.path, true);\n    this.map = options.map;\n  }\n\n  getValue(value, parent, context) {\n    let result = this.isContext ? context : this.isValue ? value : parent;\n    if (this.getter) result = this.getter(result || {});\n    if (this.map) result = this.map(result);\n    return result;\n  }\n  /**\r\n   *\r\n   * @param {*} value\r\n   * @param {Object} options\r\n   * @param {Object=} options.context\r\n   * @param {Object=} options.parent\r\n   */\n\n\n  cast(value, options) {\n    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);\n  }\n\n  resolve() {\n    return this;\n  }\n\n  describe() {\n    return {\n      type: 'ref',\n      key: this.key\n    };\n  }\n\n  toString() {\n    return `Ref(${this.key})`;\n  }\n\n  static isRef(value) {\n    return value && value.__isYupRef;\n  }\n\n} // @ts-ignore\n\nReference.prototype.__isYupRef = true;","map":{"version":3,"sources":["C:/Users/1/Desktop/bloom_app/client/node_modules/yup/es/Reference.js"],"names":["getter","prefixes","context","value","create","key","options","Reference","constructor","isContext","isValue","isSibling","path","map","TypeError","trim","prefix","slice","length","getValue","parent","result","cast","resolve","describe","type","toString","isRef","__isYupRef","prototype"],"mappings":"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","sourcesContent":["import { getter } from 'property-expr';\r\nconst prefixes = {\r\n  context: '$',\r\n  value: '.'\r\n};\r\nexport function create(key, options) {\r\n  return new Reference(key, options);\r\n}\r\nexport default class Reference {\r\n  constructor(key, options = {}) {\r\n    this.key = void 0;\r\n    this.isContext = void 0;\r\n    this.isValue = void 0;\r\n    this.isSibling = void 0;\r\n    this.path = void 0;\r\n    this.getter = void 0;\r\n    this.map = void 0;\r\n    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);\r\n    this.key = key.trim();\r\n    if (key === '') throw new TypeError('ref must be a non-empty string');\r\n    this.isContext = this.key[0] === prefixes.context;\r\n    this.isValue = this.key[0] === prefixes.value;\r\n    this.isSibling = !this.isContext && !this.isValue;\r\n    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';\r\n    this.path = this.key.slice(prefix.length);\r\n    this.getter = this.path && getter(this.path, true);\r\n    this.map = options.map;\r\n  }\r\n\r\n  getValue(value, parent, context) {\r\n    let result = this.isContext ? context : this.isValue ? value : parent;\r\n    if (this.getter) result = this.getter(result || {});\r\n    if (this.map) result = this.map(result);\r\n    return result;\r\n  }\r\n  /**\r\n   *\r\n   * @param {*} value\r\n   * @param {Object} options\r\n   * @param {Object=} options.context\r\n   * @param {Object=} options.parent\r\n   */\r\n\r\n\r\n  cast(value, options) {\r\n    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);\r\n  }\r\n\r\n  resolve() {\r\n    return this;\r\n  }\r\n\r\n  describe() {\r\n    return {\r\n      type: 'ref',\r\n      key: this.key\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return `Ref(${this.key})`;\r\n  }\r\n\r\n  static isRef(value) {\r\n    return value && value.__isYupRef;\r\n  }\r\n\r\n} // @ts-ignore\r\n\r\nReference.prototype.__isYupRef = true;"]},"metadata":{},"sourceType":"module"}