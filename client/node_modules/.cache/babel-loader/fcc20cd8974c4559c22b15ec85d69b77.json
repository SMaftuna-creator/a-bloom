{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\a-bloom\\\\client\\\\src\\\\components\\\\PostCommentsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams, Link as RouterLink } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchPostComments, toggleUpvote, toggleDownvote } from '../reducers/postCommentsReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport CommentInput from './CommentInput';\nimport { UpvoteButton, DownvoteButton } from './VoteButtons';\nimport EditDeleteMenu from './EditDeleteMenu';\nimport CommentsDisplay from './CommentsDisplay';\nimport SortCommentsMenu from './SortCommentsMenu';\nimport ErrorPage from './ErrorPage';\nimport LoadingSpinner from './LoadingSpinner';\nimport TimeAgo from 'timeago-react';\nimport { trimLink, prettifyLink, fixUrl } from '../utils/formatUrl';\nimport ReactHtmlParser from 'react-html-parser';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { Container, Paper, useMediaQuery, Typography, Link, MenuItem, ListItemIcon, Divider } from '@material-ui/core';\nimport { usePostCommentsStyles } from '../styles/muiStyles';\nimport { useTheme } from '@material-ui/core/styles';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostCommentsPage = () => {\n  _s();\n\n  const {\n    id: postId\n  } = useParams();\n  const post = useSelector(state => state.postComments);\n  const {\n    user,\n    darkMode\n  } = useSelector(state => state);\n  const [pageLoading, setPageLoading] = useState(true);\n  const [pageError, setPageError] = useState(null);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const getComments = async () => {\n      try {\n        await dispatch(fetchPostComments(postId));\n        setPageLoading(false);\n      } catch (err) {\n        setPageError(getErrorMsg(err));\n      }\n    };\n\n    getComments(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [postId]);\n  const classes = usePostCommentsStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n  if (pageError) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      disableGutters: true,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        variant: \"outlined\",\n        className: classes.mainPaper,\n        children: /*#__PURE__*/_jsxDEV(ErrorPage, {\n          errorMsg: pageError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!post || pageLoading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      disableGutters: true,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        variant: \"outlined\",\n        className: classes.mainPaper,\n        children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n          text: 'Fetching post comments...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n  const {\n    id,\n    title,\n    postType,\n    textSubmission,\n    linkSubmission,\n    imageSubmission,\n    subreddit,\n    author,\n    upvotedBy,\n    downvotedBy,\n    pointsCount,\n    comments,\n    commentCount,\n    createdAt,\n    updatedAt\n  } = post;\n  const isUpvoted = user && upvotedBy.includes(user.id);\n  const isDownvoted = user && downvotedBy.includes(user.id);\n\n  const handleUpvoteToggle = async () => {\n    try {\n      if (isUpvoted) {\n        const updatedUpvotedBy = upvotedBy.filter(u => u !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, downvotedBy));\n      } else {\n        const updatedUpvotedBy = [...upvotedBy, user.id];\n        const updatedDownvotedBy = downvotedBy.filter(d => d !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, updatedDownvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const handleDownvoteToggle = async () => {\n    try {\n      if (isDownvoted) {\n        const updatedDownvotedBy = downvotedBy.filter(d => d !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, upvotedBy));\n      } else {\n        const updatedDownvotedBy = [...downvotedBy, user.id];\n        const updatedUpvotedBy = upvotedBy.filter(u => u !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, updatedUpvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const formattedLink = postType === 'Link' && trimLink(prettifyLink(linkSubmission), 70);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    disableGutters: true,\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      variant: \"outlined\",\n      className: classes.mainPaper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.topPortion,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.votesWrapper,\n          children: [/*#__PURE__*/_jsxDEV(UpvoteButton, {\n            user: user,\n            body: post,\n            handleUpvote: handleUpvoteToggle,\n            size: isMobile ? 'small' : 'medium'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            style: {\n              color: isUpvoted ? '#FF8b60' : isDownvoted ? '#9494FF' : darkMode ? '#e4e4e4' : '#333',\n              fontWeight: 600\n            },\n            children: pointsCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DownvoteButton, {\n            user: user,\n            body: post,\n            handleDownvote: handleDownvoteToggle,\n            size: isMobile ? 'small' : 'medium'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.postDetails,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              component: RouterLink,\n              to: `/r/${subreddit.subredditName}`,\n              children: `r/${subreddit.subredditName} `\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              className: classes.userAndDate,\n              children: [\"\\u2022 Posted by\", /*#__PURE__*/_jsxDEV(Link, {\n                component: RouterLink,\n                to: `/u/${author.username}`,\n                children: ` u/${author.username} `\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this), \"\\u2022 \", /*#__PURE__*/_jsxDEV(TimeAgo, {\n                datetime: new Date(createdAt)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 19\n              }, this), createdAt !== updatedAt && /*#__PURE__*/_jsxDEV(\"em\", {\n                children: [' â€¢ edited', \" \", /*#__PURE__*/_jsxDEV(TimeAgo, {\n                  datetime: new Date(updatedAt)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 35\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            className: classes.title,\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), postType === 'Text' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: ReactHtmlParser(textSubmission)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this) : postType === 'Image' ? /*#__PURE__*/_jsxDEV(\"a\", {\n            href: imageSubmission.imageLink,\n            alt: title,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: classes.imagePost,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: title,\n              src: imageSubmission.imageLink,\n              className: classes.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Link, {\n            href: fixUrl(linkSubmission),\n            children: [formattedLink, \" \", /*#__PURE__*/_jsxDEV(OpenInNewIcon, {\n              fontSize: \"inherit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.bottomBar,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              className: classes.bottomButton,\n              children: /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                children: [/*#__PURE__*/_jsxDEV(CommentIcon, {\n                  className: classes.commentIcon\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  children: commentCount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), user && user.id === author.id && /*#__PURE__*/_jsxDEV(EditDeleteMenu, {\n              id: id,\n              isMobile: isMobile,\n              title: title,\n              postType: postType,\n              subreddit: subreddit,\n              buttonType: \"buttonGroup\",\n              textSubmission: textSubmission,\n              linkSubmission: linkSubmission\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CommentInput, {\n            user: user,\n            postId: id,\n            isMobile: isMobile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SortCommentsMenu, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        className: classes.divider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CommentsDisplay, {\n        comments: comments,\n        postId: id,\n        isMobile: isMobile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostCommentsPage, \"9LkXJBN33xdizQYTlP9cbnP4pNY=\", false, function () {\n  return [useParams, useSelector, useSelector, useDispatch, usePostCommentsStyles, useTheme, useMediaQuery];\n});\n\n_c = PostCommentsPage;\nexport default PostCommentsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCommentsPage\");","map":{"version":3,"sources":["C:/Users/1/Desktop/a-bloom/client/src/components/PostCommentsPage.js"],"names":["React","useEffect","useState","useParams","Link","RouterLink","useSelector","useDispatch","fetchPostComments","toggleUpvote","toggleDownvote","notify","CommentInput","UpvoteButton","DownvoteButton","EditDeleteMenu","CommentsDisplay","SortCommentsMenu","ErrorPage","LoadingSpinner","TimeAgo","trimLink","prettifyLink","fixUrl","ReactHtmlParser","getErrorMsg","Container","Paper","useMediaQuery","Typography","MenuItem","ListItemIcon","Divider","usePostCommentsStyles","useTheme","OpenInNewIcon","CommentIcon","PostCommentsPage","id","postId","post","state","postComments","user","darkMode","pageLoading","setPageLoading","pageError","setPageError","dispatch","getComments","err","classes","theme","isMobile","breakpoints","down","mainPaper","title","postType","textSubmission","linkSubmission","imageSubmission","subreddit","author","upvotedBy","downvotedBy","pointsCount","comments","commentCount","createdAt","updatedAt","isUpvoted","includes","isDownvoted","handleUpvoteToggle","updatedUpvotedBy","filter","u","updatedDownvotedBy","d","handleDownvoteToggle","formattedLink","topPortion","votesWrapper","color","fontWeight","postDetails","subredditName","userAndDate","username","Date","imageLink","imagePost","image","bottomBar","bottomButton","commentIcon","divider"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, Link as RouterLink } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  fetchPostComments,\r\n  toggleUpvote,\r\n  toggleDownvote,\r\n} from '../reducers/postCommentsReducer';\r\nimport { notify } from '../reducers/notificationReducer';\r\nimport CommentInput from './CommentInput';\r\nimport { UpvoteButton, DownvoteButton } from './VoteButtons';\r\nimport EditDeleteMenu from './EditDeleteMenu';\r\nimport CommentsDisplay from './CommentsDisplay';\r\nimport SortCommentsMenu from './SortCommentsMenu';\r\nimport ErrorPage from './ErrorPage';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport TimeAgo from 'timeago-react';\r\nimport { trimLink, prettifyLink, fixUrl } from '../utils/formatUrl';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport getErrorMsg from '../utils/getErrorMsg';\r\n\r\nimport {\r\n  Container,\r\n  Paper,\r\n  useMediaQuery,\r\n  Typography,\r\n  Link,\r\n  MenuItem,\r\n  ListItemIcon,\r\n  Divider,\r\n} from '@material-ui/core';\r\nimport { usePostCommentsStyles } from '../styles/muiStyles';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\n\r\nconst PostCommentsPage = () => {\r\n  const { id: postId } = useParams();\r\n  const post = useSelector((state) => state.postComments);\r\n  const { user, darkMode } = useSelector((state) => state);\r\n  const [pageLoading, setPageLoading] = useState(true);\r\n  const [pageError, setPageError] = useState(null);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const getComments = async () => {\r\n      try {\r\n        await dispatch(fetchPostComments(postId));\r\n        setPageLoading(false);\r\n      } catch (err) {\r\n        setPageError(getErrorMsg(err));\r\n      }\r\n    };\r\n    getComments();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [postId]);\r\n\r\n  const classes = usePostCommentsStyles();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\r\n\r\n  if (pageError) {\r\n    return (\r\n      <Container disableGutters>\r\n        <Paper variant=\"outlined\" className={classes.mainPaper}>\r\n          <ErrorPage errorMsg={pageError} />\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (!post || pageLoading) {\r\n    return (\r\n      <Container disableGutters>\r\n        <Paper variant=\"outlined\" className={classes.mainPaper}>\r\n          <LoadingSpinner text={'Fetching post comments...'} />\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  const {\r\n    id,\r\n    title,\r\n    postType,\r\n    textSubmission,\r\n    linkSubmission,\r\n    imageSubmission,\r\n    subreddit,\r\n    author,\r\n    upvotedBy,\r\n    downvotedBy,\r\n    pointsCount,\r\n    comments,\r\n    commentCount,\r\n    createdAt,\r\n    updatedAt,\r\n  } = post;\r\n\r\n  const isUpvoted = user && upvotedBy.includes(user.id);\r\n  const isDownvoted = user && downvotedBy.includes(user.id);\r\n\r\n  const handleUpvoteToggle = async () => {\r\n    try {\r\n      if (isUpvoted) {\r\n        const updatedUpvotedBy = upvotedBy.filter((u) => u !== user.id);\r\n        dispatch(toggleUpvote(id, updatedUpvotedBy, downvotedBy));\r\n      } else {\r\n        const updatedUpvotedBy = [...upvotedBy, user.id];\r\n        const updatedDownvotedBy = downvotedBy.filter((d) => d !== user.id);\r\n        dispatch(toggleUpvote(id, updatedUpvotedBy, updatedDownvotedBy));\r\n      }\r\n    } catch (err) {\r\n      dispatch(notify(getErrorMsg(err), 'error'));\r\n    }\r\n  };\r\n\r\n  const handleDownvoteToggle = async () => {\r\n    try {\r\n      if (isDownvoted) {\r\n        const updatedDownvotedBy = downvotedBy.filter((d) => d !== user.id);\r\n        dispatch(toggleDownvote(id, updatedDownvotedBy, upvotedBy));\r\n      } else {\r\n        const updatedDownvotedBy = [...downvotedBy, user.id];\r\n        const updatedUpvotedBy = upvotedBy.filter((u) => u !== user.id);\r\n        dispatch(toggleDownvote(id, updatedDownvotedBy, updatedUpvotedBy));\r\n      }\r\n    } catch (err) {\r\n      dispatch(notify(getErrorMsg(err), 'error'));\r\n    }\r\n  };\r\n\r\n  const formattedLink =\r\n    postType === 'Link' && trimLink(prettifyLink(linkSubmission), 70);\r\n\r\n  return (\r\n    <Container disableGutters>\r\n      <Paper variant=\"outlined\" className={classes.mainPaper}>\r\n        <div className={classes.topPortion}>\r\n          <div className={classes.votesWrapper}>\r\n            <UpvoteButton\r\n              user={user}\r\n              body={post}\r\n              handleUpvote={handleUpvoteToggle}\r\n              size={isMobile ? 'small' : 'medium'}\r\n            />\r\n            <Typography\r\n              variant=\"body1\"\r\n              style={{\r\n                color: isUpvoted\r\n                  ? '#FF8b60'\r\n                  : isDownvoted\r\n                  ? '#9494FF'\r\n                  : darkMode\r\n                  ? '#e4e4e4'\r\n                  : '#333',\r\n                fontWeight: 600,\r\n              }}\r\n            >\r\n              {pointsCount}\r\n            </Typography>\r\n            <DownvoteButton\r\n              user={user}\r\n              body={post}\r\n              handleDownvote={handleDownvoteToggle}\r\n              size={isMobile ? 'small' : 'medium'}\r\n            />\r\n          </div>\r\n          <div className={classes.postDetails}>\r\n            <Typography variant=\"subtitle2\">\r\n              <Link component={RouterLink} to={`/r/${subreddit.subredditName}`}>\r\n                {`r/${subreddit.subredditName} `}\r\n              </Link>\r\n              <Typography variant=\"caption\" className={classes.userAndDate}>\r\n                â€¢ Posted by\r\n                <Link component={RouterLink} to={`/u/${author.username}`}>\r\n                  {` u/${author.username} `}\r\n                </Link>\r\n                â€¢ <TimeAgo datetime={new Date(createdAt)} />\r\n                {createdAt !== updatedAt && (\r\n                  <em>\r\n                    {' â€¢ edited'} <TimeAgo datetime={new Date(updatedAt)} />\r\n                  </em>\r\n                )}\r\n              </Typography>\r\n            </Typography>\r\n            <Typography variant=\"h5\" className={classes.title}>\r\n              {title}\r\n            </Typography>\r\n            {postType === 'Text' ? (\r\n              <div>{ReactHtmlParser(textSubmission)}</div>\r\n            ) : postType === 'Image' ? (\r\n              <a\r\n                href={imageSubmission.imageLink}\r\n                alt={title}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className={classes.imagePost}\r\n              >\r\n                <img\r\n                  alt={title}\r\n                  src={imageSubmission.imageLink}\r\n                  className={classes.image}\r\n                />\r\n              </a>\r\n            ) : (\r\n              <Link href={fixUrl(linkSubmission)}>\r\n                {formattedLink} <OpenInNewIcon fontSize=\"inherit\" />\r\n              </Link>\r\n            )}\r\n            <div className={classes.bottomBar}>\r\n              <MenuItem className={classes.bottomButton}>\r\n                <ListItemIcon>\r\n                  <CommentIcon className={classes.commentIcon} />\r\n                  <Typography variant=\"subtitle2\">{commentCount}</Typography>\r\n                </ListItemIcon>\r\n              </MenuItem>\r\n              {user && user.id === author.id && (\r\n                <EditDeleteMenu\r\n                  id={id}\r\n                  isMobile={isMobile}\r\n                  title={title}\r\n                  postType={postType}\r\n                  subreddit={subreddit}\r\n                  buttonType=\"buttonGroup\"\r\n                  textSubmission={textSubmission}\r\n                  linkSubmission={linkSubmission}\r\n                />\r\n              )}\r\n            </div>\r\n            <CommentInput user={user} postId={id} isMobile={isMobile} />\r\n            <SortCommentsMenu />\r\n          </div>\r\n        </div>\r\n        <Divider className={classes.divider} />\r\n        <CommentsDisplay comments={comments} postId={id} isMobile={isMobile} />\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PostCommentsPage;\r\n"]},"metadata":{},"sourceType":"module"}