{"ast":null,"code":"import postService from '../services/posts';\n\nconst searchReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_SEARCH_RESULTS':\n      return action.payload;\n\n    case 'TOGGLE_SEARCH_VOTE':\n      return { ...state,\n        results: state.results.map(r => r.id !== action.payload.id ? r : { ...r,\n          ...action.payload.data\n        })\n      };\n\n    case 'LOAD_SEARCH_POSTS':\n      return { ...action.payload,\n        results: [...state.results, ...action.payload.results]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setSearchResults = query => {\n  return async dispatch => {\n    const results = await postService.getSearchResults(query, 10, 1);\n    dispatch({\n      type: 'SET_SEARCH_RESULTS',\n      payload: results\n    });\n  };\n};\nexport const loadSearchPosts = (query, page) => {\n  return async dispatch => {\n    const results = await postService.getSearchResults(query, 10, page);\n    dispatch({\n      type: 'LOAD_SEARCH_POSTS',\n      payload: results\n    });\n  };\n};\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_SEARCH_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.upvotePost(id);\n  };\n};\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_SEARCH_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.downvotePost(id);\n  };\n};\nexport default searchReducer;","map":{"version":3,"sources":["C:/Users/1/Desktop/a-bloom/client/src/reducers/searchReducer.js"],"names":["postService","searchReducer","state","action","type","payload","results","map","r","id","data","setSearchResults","query","dispatch","getSearchResults","loadSearchPosts","page","toggleUpvote","upvotedBy","downvotedBy","pointsCount","length","upvotePost","toggleDownvote","downvotePost"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;;AAEA,MAAMC,aAAa,GAAG,YAA0B;AAAA,MAAzBC,KAAyB,uEAAjB,IAAiB;AAAA,MAAXC,MAAW;;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,oBAAL;AACE,aAAOD,MAAM,CAACE,OAAd;;AACF,SAAK,oBAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELI,QAAAA,OAAO,EAAEJ,KAAK,CAACI,OAAN,CAAcC,GAAd,CAAmBC,CAAD,IACzBA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACE,OAAP,CAAeI,EAAxB,GAA6BD,CAA7B,GAAiC,EAAE,GAAGA,CAAL;AAAQ,aAAGL,MAAM,CAACE,OAAP,CAAeK;AAA1B,SAD1B;AAFJ,OAAP;;AAMF,SAAK,mBAAL;AACE,aAAO,EACL,GAAGP,MAAM,CAACE,OADL;AAELC,QAAAA,OAAO,EAAE,CAAC,GAAGJ,KAAK,CAACI,OAAV,EAAmB,GAAGH,MAAM,CAACE,OAAP,CAAeC,OAArC;AAFJ,OAAP;;AAIF;AACE,aAAOJ,KAAP;AAhBJ;AAkBD,CAnBD;;AAqBA,OAAO,MAAMS,gBAAgB,GAAIC,KAAD,IAAW;AACzC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMP,OAAO,GAAG,MAAMN,WAAW,CAACc,gBAAZ,CAA6BF,KAA7B,EAAoC,EAApC,EAAwC,CAAxC,CAAtB;AAEAC,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,oBADC;AAEPC,MAAAA,OAAO,EAAEC;AAFF,KAAD,CAAR;AAID,GAPD;AAQD,CATM;AAWP,OAAO,MAAMS,eAAe,GAAG,CAACH,KAAD,EAAQI,IAAR,KAAiB;AAC9C,SAAO,MAAOH,QAAP,IAAoB;AACzB,UAAMP,OAAO,GAAG,MAAMN,WAAW,CAACc,gBAAZ,CAA6BF,KAA7B,EAAoC,EAApC,EAAwCI,IAAxC,CAAtB;AAEAH,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,mBADC;AAEPC,MAAAA,OAAO,EAAEC;AAFF,KAAD,CAAR;AAID,GAPD;AAQD,CATM;AAWP,OAAO,MAAMW,YAAY,GAAG,CAACR,EAAD,EAAKS,SAAL,EAAgBC,WAAhB,KAAgC;AAC1D,SAAO,MAAON,QAAP,IAAoB;AACzB,QAAIO,WAAW,GAAGF,SAAS,CAACG,MAAV,GAAmBF,WAAW,CAACE,MAAjD;;AACA,QAAID,WAAW,GAAG,CAAlB,EAAqB;AACnBA,MAAAA,WAAW,GAAG,CAAd;AACD;;AAEDP,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,oBADC;AAEPC,MAAAA,OAAO,EAAE;AAAEI,QAAAA,EAAF;AAAMC,QAAAA,IAAI,EAAE;AAAEQ,UAAAA,SAAF;AAAaE,UAAAA,WAAb;AAA0BD,UAAAA;AAA1B;AAAZ;AAFF,KAAD,CAAR;AAKA,UAAMnB,WAAW,CAACsB,UAAZ,CAAuBb,EAAvB,CAAN;AACD,GAZD;AAaD,CAdM;AAgBP,OAAO,MAAMc,cAAc,GAAG,CAACd,EAAD,EAAKU,WAAL,EAAkBD,SAAlB,KAAgC;AAC5D,SAAO,MAAOL,QAAP,IAAoB;AACzB,QAAIO,WAAW,GAAGF,SAAS,CAACG,MAAV,GAAmBF,WAAW,CAACE,MAAjD;;AACA,QAAID,WAAW,GAAG,CAAlB,EAAqB;AACnBA,MAAAA,WAAW,GAAG,CAAd;AACD;;AAEDP,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,oBADC;AAEPC,MAAAA,OAAO,EAAE;AAAEI,QAAAA,EAAF;AAAMC,QAAAA,IAAI,EAAE;AAAEQ,UAAAA,SAAF;AAAaE,UAAAA,WAAb;AAA0BD,UAAAA;AAA1B;AAAZ;AAFF,KAAD,CAAR;AAKA,UAAMnB,WAAW,CAACwB,YAAZ,CAAyBf,EAAzB,CAAN;AACD,GAZD;AAaD,CAdM;AAgBP,eAAeR,aAAf","sourcesContent":["import postService from '../services/posts';\r\n\r\nconst searchReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n    case 'SET_SEARCH_RESULTS':\r\n      return action.payload;\r\n    case 'TOGGLE_SEARCH_VOTE':\r\n      return {\r\n        ...state,\r\n        results: state.results.map((r) =>\r\n          r.id !== action.payload.id ? r : { ...r, ...action.payload.data }\r\n        ),\r\n      };\r\n    case 'LOAD_SEARCH_POSTS':\r\n      return {\r\n        ...action.payload,\r\n        results: [...state.results, ...action.payload.results],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setSearchResults = (query) => {\r\n  return async (dispatch) => {\r\n    const results = await postService.getSearchResults(query, 10, 1);\r\n\r\n    dispatch({\r\n      type: 'SET_SEARCH_RESULTS',\r\n      payload: results,\r\n    });\r\n  };\r\n};\r\n\r\nexport const loadSearchPosts = (query, page) => {\r\n  return async (dispatch) => {\r\n    const results = await postService.getSearchResults(query, 10, page);\r\n\r\n    dispatch({\r\n      type: 'LOAD_SEARCH_POSTS',\r\n      payload: results,\r\n    });\r\n  };\r\n};\r\n\r\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\r\n  return async (dispatch) => {\r\n    let pointsCount = upvotedBy.length - downvotedBy.length;\r\n    if (pointsCount < 0) {\r\n      pointsCount = 0;\r\n    }\r\n\r\n    dispatch({\r\n      type: 'TOGGLE_SEARCH_VOTE',\r\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\r\n    });\r\n\r\n    await postService.upvotePost(id);\r\n  };\r\n};\r\n\r\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\r\n  return async (dispatch) => {\r\n    let pointsCount = upvotedBy.length - downvotedBy.length;\r\n    if (pointsCount < 0) {\r\n      pointsCount = 0;\r\n    }\r\n\r\n    dispatch({\r\n      type: 'TOGGLE_SEARCH_VOTE',\r\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\r\n    });\r\n\r\n    await postService.downvotePost(id);\r\n  };\r\n};\r\n\r\nexport default searchReducer;\r\n"]},"metadata":{},"sourceType":"module"}