{"ast":null,"code":"/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nvar SEC_ARRAY = [60, 60, 24, 7, 365 / 7 / 12, 12];\n/**\n * format Date / string / timestamp to timestamp\n * @param input\n * @returns {*}\n */\n\nexport function toDate(input) {\n  if (input instanceof Date) return input; // @ts-ignore\n\n  if (!isNaN(input) || /^\\d+$/.test(input)) return new Date(parseInt(input));\n  input = (input || '' // @ts-ignore\n  ).trim().replace(/\\.\\d+/, '') // remove milliseconds\n  .replace(/-/, '/').replace(/-/, '/').replace(/(\\d)T(\\d)/, '$1 $2').replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n  .replace(/([+-]\\d\\d):?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n\n  return new Date(input);\n}\n/**\n * format the diff second to *** time ago, with setting locale\n * @param diff\n * @param localeFunc\n * @returns\n */\n\nexport function formatDiff(diff, localeFunc) {\n  /**\n   * if locale is not exist, use defaultLocale.\n   * if defaultLocale is not exist, use build-in `en`.\n   * be sure of no error when locale is not exist.\n   *\n   * If `time in`, then 1\n   * If `time ago`, then 0\n   */\n  var agoIn = diff < 0 ? 1 : 0;\n  /**\n   * Get absolute value of number (|diff| is non-negative) value of x\n   * |diff| = diff if diff is positive\n   * |diff| = -diff if diff is negative\n   * |0| = 0\n   */\n\n  diff = Math.abs(diff);\n  /**\n   * Time in seconds\n   */\n\n  var totalSec = diff;\n  /**\n   * Unit of time\n   */\n\n  var idx = 0;\n\n  for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {\n    diff /= SEC_ARRAY[idx];\n  }\n  /**\n   * Math.floor() is alternative of ~~\n   *\n   * The differences and bugs:\n   * Math.floor(3.7) -> 4 but ~~3.7 -> 3\n   * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552\n   *\n   * More information about the performance of algebraic:\n   * https://www.youtube.com/watch?v=65-RbBwZQdU\n   */\n\n\n  diff = Math.floor(diff);\n  idx *= 2;\n  if (diff > (idx === 0 ? 9 : 1)) idx += 1;\n  return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());\n}\n/**\n * calculate the diff second between date to be formatted an now date.\n * @param date\n * @param relativeDate\n * @returns {number}\n */\n\nexport function diffSec(date, relativeDate) {\n  var relDate = relativeDate ? toDate(relativeDate) : new Date();\n  return (+relDate - +toDate(date)) / 1000;\n}\n/**\n * nextInterval: calculate the next interval time.\n * - diff: the diff sec between now and date to be formatted.\n *\n * What's the meaning?\n * diff = 61 then return 59\n * diff = 3601 (an hour + 1 second), then return 3599\n * make the interval with high performance.\n **/\n\nexport function nextInterval(diff) {\n  var rst = 1,\n      i = 0,\n      d = Math.abs(diff);\n\n  for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n    diff /= SEC_ARRAY[i];\n    rst *= SEC_ARRAY[i];\n  }\n\n  d = d % rst;\n  d = d ? rst - d : rst;\n  return Math.ceil(d);\n}","map":{"version":3,"mappings":"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","names":["SEC_ARRAY","toDate","input","Date","isNaN","test","parseInt","trim","replace","formatDiff","diff","localeFunc","agoIn","Math","abs","totalSec","idx","length","floor","toString","diffSec","date","relativeDate","relDate","nextInterval","rst","i","d","ceil"],"sources":["../../src/utils/date.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}