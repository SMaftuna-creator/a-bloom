{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\a-bloom\\\\client\\\\src\\\\components\\\\PostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport generateBase64Encode from '../utils/genBase64Encode';\nimport { createNewPost, updatePost } from '../reducers/postCommentsReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport * as yup from 'yup';\nimport AlertMessage from './AlertMessage';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { Button, ButtonGroup, TextField, Typography, useMediaQuery, IconButton } from '@material-ui/core';\nimport { usePostFormStyles } from '../styles/muiStyles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useTheme } from '@material-ui/core/styles';\nimport TitleIcon from '@material-ui/icons/Title';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\nimport ImageIcon from '@material-ui/icons/Image';\nimport LinkIcon from '@material-ui/icons/Link';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  title: yup.string().required('Required'),\n  textSubmission: yup.string(),\n  imageSubmission: yup.string(),\n  linkSubmission: yup.string().matches(/^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\\\-\\\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/, 'Valid URL required')\n});\n\nconst AddPostForm = _ref => {\n  _s();\n\n  let {\n    postType,\n    actionType,\n    postToEditType,\n    postToEditTitle,\n    postToEditSub,\n    postToEditId,\n    textSubmission,\n    linkSubmission,\n    fromSubreddit\n  } = _ref;\n  const [fileName, setFileName] = useState('');\n  const [error, setError] = useState(null);\n  const {\n    subs\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n  const classes = usePostFormStyles();\n\n  const fileInputOnChange = (e, setFieldValue) => {\n    const file = e.target.files[0];\n    setFileName(file.name);\n    generateBase64Encode(file, setFieldValue);\n  };\n\n  const clearFileSelection = setFieldValue => {\n    setFieldValue('imageSubmission', '');\n    setFileName('');\n  };\n\n  const handleAddPost = async (values, _ref2) => {\n    let {\n      setSubmitting\n    } = _ref2;\n\n    try {\n      setSubmitting(true);\n      const postId = await dispatch(createNewPost(values));\n      setSubmitting(false);\n      history.push(`/comments/${postId}`);\n      dispatch(notify('Added new post!', 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      setError(getErrorMsg(err));\n    }\n  };\n\n  const handleUpdatePost = async (values, _ref3) => {\n    let {\n      setSubmitting\n    } = _ref3;\n\n    try {\n      setSubmitting(true);\n      await dispatch(updatePost(postToEditId, values));\n      setSubmitting(false);\n      history.push(`/comments/${postToEditId}`);\n      dispatch(notify('Successfully updated the post!', 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      setError(getErrorMsg(err));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        title: actionType === 'edit' ? postToEditTitle : '',\n        postType: actionType === 'edit' ? postToEditType : postType,\n        textSubmission: actionType === 'edit' ? textSubmission : '',\n        linkSubmission: actionType === 'edit' ? linkSubmission : '',\n        imageSubmission: '',\n        subreddit: actionType === 'edit' ? postToEditSub.id : !fromSubreddit ? '' : fromSubreddit.id\n      },\n      onSubmit: actionType === 'edit' ? handleUpdatePost : handleAddPost,\n      validationSchema: validationSchema,\n      children: _ref4 => {\n        let {\n          isSubmitting,\n          values,\n          setFieldValue\n        } = _ref4;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          className: classes.form,\n          children: [actionType !== 'edit' && /*#__PURE__*/_jsxDEV(ButtonGroup, {\n            color: \"secondary\",\n            fullWidth: true,\n            className: classes.typeBtnGroup,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => setFieldValue('postType', 'Text'),\n              variant: values.postType === 'Text' ? 'contained' : 'outlined',\n              children: [/*#__PURE__*/_jsxDEV(TextFormatIcon, {\n                style: {\n                  marginRight: 2\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this), \"Text\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => setFieldValue('postType', 'Image'),\n              variant: values.postType === 'Image' ? 'contained' : 'outlined',\n              children: [/*#__PURE__*/_jsxDEV(ImageIcon, {\n                style: {\n                  marginRight: 5\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 19\n              }, this), \"Image\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => setFieldValue('postType', 'Link'),\n              variant: values.postType === 'Link' ? 'contained' : 'outlined',\n              children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n                style: {\n                  marginRight: 5\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 19\n              }, this), \"Link\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.input,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.inputIconText,\n              color: \"primary\",\n              variant: \"h5\",\n              children: \"b/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n              name: \"subreddit\",\n              onChange: (e, value) => setFieldValue('subreddit', value ? value.id : ''),\n              fullWidth: true,\n              options: subs && subs.allSubs,\n              disabled: actionType === 'edit' || !!fromSubreddit,\n              getOptionLabel: option => option.subredditName,\n              getOptionSelected: (option, value) => option.id === value.id,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: actionType === 'edit' ? postToEditSub.subredditName : !fromSubreddit ? 'Choose a community' : fromSubreddit.subredditName,\n                placeholder: \"Search by name\",\n                required: true,\n                disabled: actionType === 'edit' || !!fromSubreddit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.input,\n            children: [/*#__PURE__*/_jsxDEV(TitleIcon, {\n              className: classes.inputIcon,\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n              name: \"title\",\n              type: \"text\",\n              placeholder: \"Enter title\",\n              label: \"Title\",\n              required: true,\n              fullWidth: true,\n              disabled: actionType === 'edit'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), values.postType === 'Text' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.textInput,\n            children: [/*#__PURE__*/_jsxDEV(ChatIcon, {\n              className: classes.inputIcon,\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n              name: \"textSubmission\",\n              placeholder: `Write your thoughts`,\n              multiline: true,\n              label: \"Text\",\n              required: values.postType === 'Text',\n              fullWidth: true,\n              variant: \"outlined\",\n              rows: 4,\n              maxRows: Infinity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this), values.postType === 'Image' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.imageInput,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.imageBtnsWrapper,\n              children: [/*#__PURE__*/_jsxDEV(ImageIcon, {\n                className: classes.inputIcon,\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"image-upload\",\n                accept: \"image/*\",\n                hidden: true,\n                onChange: e => fileInputOnChange(e, setFieldValue),\n                required: values.postType === 'Image'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                component: \"label\",\n                htmlFor: \"image-upload\",\n                variant: \"outlined\",\n                color: \"primary\",\n                fullWidth: true,\n                startIcon: values.imageSubmission ? /*#__PURE__*/_jsxDEV(CheckCircleIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(PublishIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 25\n                }, this),\n                size: isMobile ? 'small' : 'medium',\n                className: classes.selectBtn,\n                children: values.imageSubmission ? `${isMobile ? '' : 'Selected '}\"${fileName}\"` : `Select Image`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 19\n              }, this), values.imageSubmission && /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => clearFileSelection(setFieldValue),\n                color: \"secondary\",\n                size: isMobile ? 'small' : 'medium',\n                className: classes.clearSelectionBtn,\n                children: /*#__PURE__*/_jsxDEV(CancelIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this), values.imageSubmission && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.imagePreview,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                alt: fileName,\n                src: values.imageSubmission,\n                width: isMobile ? 250 : 350\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), values.postType === 'Link' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.input,\n            children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n              className: classes.inputIcon,\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n              name: \"linkSubmission\",\n              type: \"text\",\n              placeholder: \"Enter URL\",\n              label: \"Link\",\n              required: values.postType === 'Link',\n              fullWidth: true,\n              variant: actionType === 'edit' ? 'outlined' : 'standard'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            color: \"secondary\",\n            variant: \"contained\",\n            size: \"large\",\n            className: classes.submitButton,\n            disabled: isSubmitting,\n            startIcon: postToEditId ? /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(PostAddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 56\n            }, this),\n            children: postToEditId ? isSubmitting ? 'Updating' : 'Update' : isSubmitting ? 'Posting' : 'Post'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlertMessage, {\n      error: error,\n      severity: \"error\",\n      clearError: () => setError(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddPostForm, \"yx7Ybezi26EF6lukvmZz6eBbfUM=\", false, function () {\n  return [useSelector, useDispatch, useHistory, useTheme, useMediaQuery, usePostFormStyles];\n});\n\n_c = AddPostForm;\nexport default AddPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPostForm\");","map":{"version":3,"sources":["C:/Users/1/Desktop/a-bloom/client/src/components/PostForm.js"],"names":["React","useState","useSelector","useDispatch","useHistory","Formik","Form","TextInput","generateBase64Encode","createNewPost","updatePost","notify","yup","AlertMessage","getErrorMsg","Button","ButtonGroup","TextField","Typography","useMediaQuery","IconButton","usePostFormStyles","Autocomplete","useTheme","TitleIcon","TextFormatIcon","ImageIcon","LinkIcon","PublishIcon","CheckCircleIcon","CancelIcon","ChatIcon","PostAddIcon","EditIcon","validationSchema","object","title","string","required","textSubmission","imageSubmission","linkSubmission","matches","AddPostForm","postType","actionType","postToEditType","postToEditTitle","postToEditSub","postToEditId","fromSubreddit","fileName","setFileName","error","setError","subs","state","dispatch","history","theme","isMobile","breakpoints","down","classes","fileInputOnChange","e","setFieldValue","file","target","files","name","clearFileSelection","handleAddPost","values","setSubmitting","postId","push","err","handleUpdatePost","root","subreddit","id","isSubmitting","form","typeBtnGroup","marginRight","input","inputIconText","value","allSubs","option","subredditName","params","inputIcon","textInput","Infinity","imageInput","imageBtnsWrapper","selectBtn","clearSelectionBtn","imagePreview","submitButton"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport { TextInput } from './FormikMuiFields';\r\nimport generateBase64Encode from '../utils/genBase64Encode';\r\nimport { createNewPost, updatePost } from '../reducers/postCommentsReducer';\r\nimport { notify } from '../reducers/notificationReducer';\r\nimport * as yup from 'yup';\r\nimport AlertMessage from './AlertMessage';\r\nimport getErrorMsg from '../utils/getErrorMsg';\r\n\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  TextField,\r\n  Typography,\r\n  useMediaQuery,\r\n  IconButton,\r\n} from '@material-ui/core';\r\nimport { usePostFormStyles } from '../styles/muiStyles';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport TitleIcon from '@material-ui/icons/Title';\r\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst validationSchema = yup.object({\r\n  title: yup.string().required('Required'),\r\n  textSubmission: yup.string(),\r\n  imageSubmission: yup.string(),\r\n  linkSubmission: yup\r\n    .string()\r\n    .matches(\r\n      /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\\\-\\\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/,\r\n      'Valid URL required'\r\n    ),\r\n});\r\n\r\nconst AddPostForm = ({\r\n  postType,\r\n  actionType,\r\n  postToEditType,\r\n  postToEditTitle,\r\n  postToEditSub,\r\n  postToEditId,\r\n  textSubmission,\r\n  linkSubmission,\r\n  fromSubreddit,\r\n}) => {\r\n  const [fileName, setFileName] = useState('');\r\n  const [error, setError] = useState(null);\r\n  const { subs } = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\r\n  const classes = usePostFormStyles();\r\n\r\n  const fileInputOnChange = (e, setFieldValue) => {\r\n    const file = e.target.files[0];\r\n    setFileName(file.name);\r\n    generateBase64Encode(file, setFieldValue);\r\n  };\r\n\r\n  const clearFileSelection = (setFieldValue) => {\r\n    setFieldValue('imageSubmission', '');\r\n    setFileName('');\r\n  };\r\n\r\n  const handleAddPost = async (values, { setSubmitting }) => {\r\n    try {\r\n      setSubmitting(true);\r\n      const postId = await dispatch(createNewPost(values));\r\n      setSubmitting(false);\r\n      history.push(`/comments/${postId}`);\r\n      dispatch(notify('Added new post!', 'success'));\r\n    } catch (err) {\r\n      setSubmitting(false);\r\n      setError(getErrorMsg(err));\r\n    }\r\n  };\r\n\r\n  const handleUpdatePost = async (values, { setSubmitting }) => {\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(updatePost(postToEditId, values));\r\n      setSubmitting(false);\r\n      history.push(`/comments/${postToEditId}`);\r\n      dispatch(notify('Successfully updated the post!', 'success'));\r\n    } catch (err) {\r\n      setSubmitting(false);\r\n      setError(getErrorMsg(err));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Formik\r\n        initialValues={{\r\n          title: actionType === 'edit' ? postToEditTitle : '',\r\n          postType: actionType === 'edit' ? postToEditType : postType,\r\n          textSubmission: actionType === 'edit' ? textSubmission : '',\r\n          linkSubmission: actionType === 'edit' ? linkSubmission : '',\r\n          imageSubmission: '',\r\n          subreddit:\r\n            actionType === 'edit'\r\n              ? postToEditSub.id\r\n              : !fromSubreddit\r\n              ? ''\r\n              : fromSubreddit.id,\r\n        }}\r\n        onSubmit={actionType === 'edit' ? handleUpdatePost : handleAddPost}\r\n        validationSchema={validationSchema}\r\n      >\r\n        {({ isSubmitting, values, setFieldValue }) => (\r\n          <Form className={classes.form}>\r\n            {actionType !== 'edit' && (\r\n              <ButtonGroup\r\n                color=\"secondary\"\r\n                fullWidth\r\n                className={classes.typeBtnGroup}\r\n              >\r\n                <Button\r\n                  onClick={() => setFieldValue('postType', 'Text')}\r\n                  variant={\r\n                    values.postType === 'Text' ? 'contained' : 'outlined'\r\n                  }\r\n                >\r\n                  <TextFormatIcon style={{ marginRight: 2 }} />\r\n                  Text\r\n                </Button>\r\n                <Button\r\n                  onClick={() => setFieldValue('postType', 'Image')}\r\n                  variant={\r\n                    values.postType === 'Image' ? 'contained' : 'outlined'\r\n                  }\r\n                >\r\n                  <ImageIcon style={{ marginRight: 5 }} />\r\n                  Image\r\n                </Button>\r\n                <Button\r\n                  onClick={() => setFieldValue('postType', 'Link')}\r\n                  variant={\r\n                    values.postType === 'Link' ? 'contained' : 'outlined'\r\n                  }\r\n                >\r\n                  <LinkIcon style={{ marginRight: 5 }} />\r\n                  Link\r\n                </Button>\r\n              </ButtonGroup>\r\n            )}\r\n            <div className={classes.input}>\r\n              <Typography\r\n                className={classes.inputIconText}\r\n                color=\"primary\"\r\n                variant=\"h5\"\r\n              >\r\n                b/\r\n              </Typography>\r\n              <Autocomplete\r\n                name=\"subreddit\"\r\n                onChange={(e, value) =>\r\n                  setFieldValue('subreddit', value ? value.id : '')\r\n                }\r\n                fullWidth\r\n                options={subs && subs.allSubs}\r\n                disabled={actionType === 'edit' || !!fromSubreddit}\r\n                getOptionLabel={(option) => option.subredditName}\r\n                getOptionSelected={(option, value) => option.id === value.id}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label={\r\n                      actionType === 'edit'\r\n                        ? postToEditSub.subredditName\r\n                        : !fromSubreddit\r\n                        ? 'Choose a community'\r\n                        : fromSubreddit.subredditName\r\n                    }\r\n                    placeholder=\"Search by name\"\r\n                    required\r\n                    disabled={actionType === 'edit' || !!fromSubreddit}\r\n                  />\r\n                )}\r\n              />\r\n            </div>\r\n            <div className={classes.input}>\r\n              <TitleIcon className={classes.inputIcon} color=\"primary\" />\r\n              <TextInput\r\n                name=\"title\"\r\n                type=\"text\"\r\n                placeholder=\"Enter title\"\r\n                label=\"Title\"\r\n                required\r\n                fullWidth\r\n                disabled={actionType === 'edit'}\r\n              />\r\n            </div>\r\n            {values.postType === 'Text' && (\r\n              <div className={classes.textInput}>\r\n                <ChatIcon className={classes.inputIcon} color=\"primary\" />\r\n                <TextInput\r\n                  name=\"textSubmission\"\r\n                  placeholder={`Write your thoughts`}\r\n                  multiline\r\n                  label=\"Text\"\r\n                  required={values.postType === 'Text'}\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  rows={4}\r\n                  maxRows={Infinity}\r\n                />\r\n              </div>\r\n            )}\r\n            {values.postType === 'Image' && (\r\n              <div className={classes.imageInput}>\r\n                <div className={classes.imageBtnsWrapper}>\r\n                  <ImageIcon className={classes.inputIcon} color=\"primary\" />\r\n                  <input\r\n                    type=\"file\"\r\n                    id=\"image-upload\"\r\n                    accept=\"image/*\"\r\n                    hidden\r\n                    onChange={(e) => fileInputOnChange(e, setFieldValue)}\r\n                    required={values.postType === 'Image'}\r\n                  />\r\n                  <Button\r\n                    component=\"label\"\r\n                    htmlFor=\"image-upload\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    startIcon={\r\n                      values.imageSubmission ? (\r\n                        <CheckCircleIcon />\r\n                      ) : (\r\n                        <PublishIcon />\r\n                      )\r\n                    }\r\n                    size={isMobile ? 'small' : 'medium'}\r\n                    className={classes.selectBtn}\r\n                  >\r\n                    {values.imageSubmission\r\n                      ? `${isMobile ? '' : 'Selected '}\"${fileName}\"`\r\n                      : `Select Image`}\r\n                  </Button>\r\n                  {values.imageSubmission && (\r\n                    <IconButton\r\n                      onClick={() => clearFileSelection(setFieldValue)}\r\n                      color=\"secondary\"\r\n                      size={isMobile ? 'small' : 'medium'}\r\n                      className={classes.clearSelectionBtn}\r\n                    >\r\n                      <CancelIcon />\r\n                    </IconButton>\r\n                  )}\r\n                </div>\r\n                {values.imageSubmission && (\r\n                  <div className={classes.imagePreview}>\r\n                    <img\r\n                      alt={fileName}\r\n                      src={values.imageSubmission}\r\n                      width={isMobile ? 250 : 350}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n            {values.postType === 'Link' && (\r\n              <div className={classes.input}>\r\n                <LinkIcon className={classes.inputIcon} color=\"primary\" />\r\n                <TextInput\r\n                  name=\"linkSubmission\"\r\n                  type=\"text\"\r\n                  placeholder=\"Enter URL\"\r\n                  label=\"Link\"\r\n                  required={values.postType === 'Link'}\r\n                  fullWidth\r\n                  variant={actionType === 'edit' ? 'outlined' : 'standard'}\r\n                />\r\n              </div>\r\n            )}\r\n            <Button\r\n              type=\"submit\"\r\n              color=\"secondary\"\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              className={classes.submitButton}\r\n              disabled={isSubmitting}\r\n              startIcon={postToEditId ? <EditIcon /> : <PostAddIcon />}\r\n            >\r\n              {postToEditId\r\n                ? isSubmitting\r\n                  ? 'Updating'\r\n                  : 'Update'\r\n                : isSubmitting\r\n                ? 'Posting'\r\n                : 'Post'}\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      <AlertMessage\r\n        error={error}\r\n        severity=\"error\"\r\n        clearError={() => setError(null)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddPostForm;\r\n"]},"metadata":{},"sourceType":"module"}